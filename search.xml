<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CAD操作快捷键</title>
    <url>/koi/cad/quickly/</url>
    <content><![CDATA[<h2 id="1-入门"><a href="#1-入门" class="headerlink" title="1 入门"></a>1 入门</h2><h3 id="1-1-前言"><a href="#1-1-前言" class="headerlink" title="1.1 前言"></a>1.1 前言</h3><p>op 进入 option、选项功能，或空白右击，</p>
<p>z+空格+e+空格 图形回到正中央</p>
<h3 id="1-2-直线-快捷键-L"><a href="#1-2-直线-快捷键-L" class="headerlink" title="1.2 直线 - 快捷键 L"></a><strong>1.2 直线 - 快捷键 L</strong></h3><p><strong>定长直线正交</strong>（F8）–L + 空格 + 点一下确定起始点 + 输入数字 + 移动鼠标（横向或纵向）+ 空格结束</p>
<p><strong>直线中点处直线的绘制</strong><br>前提：对象捕捉（F3）（打开对象捕捉然后右键设置对象捕捉设置的中点），–点绘图中直线+鼠标移至中点处+小三角出现+直线操作</p>
<p><strong>直线绘制封闭图形</strong> –C 自动封闭图形（选中直线两端点绘制）</p>
<h3 id="1-3-圆-快捷键-C"><a href="#1-3-圆-快捷键-C" class="headerlink" title="1.3 .圆 - 快捷键 C"></a><strong>1.3 .圆 - 快捷键 C</strong></h3><p><strong>R 定直径的圆</strong> –C+空格+输入半径+空格</p>
<p>**D 定半径的圆 ** –C+空格+d+空格+输入半径+空格</p>
<p><strong>（同心圆）</strong>打开对象捕捉设置圆心 –C+空格+输入 d+空格+输入直径+空格</p>
<p><strong>2P 以已知线段为直径的圆</strong> –C+空格+输入 2p 或选择两点+空格+选择线段两点</p>
<p><strong>T 与两条相交直线相切的圆</strong>（任选半径）–C+空格+输入 T+制定切点+输入半径+空格</p>
<p><strong>3P(外切圆)</strong> 三角形的外切圆–C+空格+输入 3p 或选择三点+空格+选择图形三条线任意位置</p>
<p><strong>tan（内切圆）</strong>三角形的内切圆–C+空格+输入 3p+输入 tan+空格+选择线段+重复输入 tan 和选择</p>
<h3 id="1-4-圆弧-快捷键-ARC"><a href="#1-4-圆弧-快捷键-ARC" class="headerlink" title="1.4 圆弧 - 快捷键 ARC"></a><strong>1.4 圆弧 - 快捷键 ARC</strong></h3><p><strong>三个点绘制圆弧</strong>–arc+空格+选择三点</p>
<p>二个点加半径绘制圆弧–arc+空格+e+空格（为了选择端点）+选择点+r+空格（为了选择半径）+输入半径</p>
<p><font color=red>注意：<strong>圆弧始终为逆时针旋转</strong></font></p>
<h3 id="1-5-多段线-快捷键-PL"><a href="#1-5-多段线-快捷键-PL" class="headerlink" title="1.5 多段线 - 快捷键 PL"></a><strong>1.5 多段线 - 快捷键 PL</strong></h3><p><strong>多段线绘制圆弧</strong>–先点击多段线+L+空格+确定起始点+a+空格快捷键：R 半径 D 切换圆弧弧度方向</p>
<p><strong>多条线段合并成多段线</strong>–PE+空格+M 全选中+空格+y+空格+合并+空格空格<br>多线段宽度选择 PE+空格+W</p>
<p><font color=red>多段线可以设置宽度</font>(练习：用多段线绘制一个箭头)</p>
<h3 id="1-6-多边形-快捷键-POL"><a href="#1-6-多边形-快捷键-POL" class="headerlink" title="1.6 多边形 - 快捷键 POL"></a><strong>1.6 多边形 - 快捷键 POL</strong></h3><p><strong>指定中心点的多边形</strong>–POL+边数+中心点+半径（内接&#x2F;外切）</p>
<p><strong>指定边的多边形</strong>–POL+空格+E+空格+先绘制一个有形状的多边形+输入边长+空格</p>
<h3 id="1-7-移动-快捷键-M-和-复制-快捷键-CO"><a href="#1-7-移动-快捷键-M-和-复制-快捷键-CO" class="headerlink" title="1.7 移动 - 快捷键 M 和 复制 - 快捷键 CO"></a><strong>1.7 移动 - 快捷键 M 和 复制 - 快捷键 CO</strong></h3><p><strong>移动</strong>：m+空格+选中对象+空格+选基点+移动鼠标+点一下</p>
<p><strong>复制</strong>：co+空格+选中对象+空格+选基点+移动鼠标+点一下(模式可以选择可复制多个 也可选择只复制一次)</p>
<h3 id="1-8-拉伸-快捷键-S"><a href="#1-8-拉伸-快捷键-S" class="headerlink" title="1.8 拉伸 - 快捷键 S"></a><strong>1.8 拉伸 - 快捷键 S</strong></h3><p>s+空格+选中对象+空格+输入+空格</p>
<h3 id="1-9-旋转-快捷键-RO"><a href="#1-9-旋转-快捷键-RO" class="headerlink" title="1.9 旋转 - 快捷键 RO"></a><strong>1.9 旋转 - 快捷键 RO</strong></h3><p><strong>复制对象进行旋转</strong>：ro+空格+选中对象+空格+选中基点+c+空格</p>
<p><strong>参照图形进行旋转</strong>：ro+空格+选中对象+空格+选中基点+r+空格+选中参照</p>
<h3 id="1-10-镜像-快捷键-MI-和-缩放-快捷键-SC-、对齐缩放-AL"><a href="#1-10-镜像-快捷键-MI-和-缩放-快捷键-SC-、对齐缩放-AL" class="headerlink" title="1.10 镜像 - 快捷键 MI 和 缩放 - 快捷键 SC 、对齐缩放 - AL"></a><strong>1.10 镜像 - 快捷键 MI 和 缩放 - 快捷键 SC 、对齐缩放 - AL</strong></h3><p><strong>镜像</strong>：mi+空格+选中对象+空格+找镜像线(点两下)+空格+直接空格(默认不删除源图像)<br>缩放</p>
<p><strong>缩放</strong>：sc+空格+选中对象+指定基点+空格+比例因子+空格</p>
<p><strong>参照缩放</strong>：sc+空格+选中对象+空格+选中基点(顶点位置)+空格+r+选中参照 1+选中参照 2+鼠标移动</p>
<p>**<font color=red>对齐缩放</font>**（AL）：al+空格+指定第一个源点+指定第一个目标点+指定第二个源点+指定第二个目标点+点击是否缩放+空格(空格默认不锁放)</p>
<h3 id="1-11-修剪-快捷键-TR-和-延申-快捷键-EX"><a href="#1-11-修剪-快捷键-TR-和-延申-快捷键-EX" class="headerlink" title="1.11 修剪 - 快捷键 TR 和 延申 - 快捷键 EX"></a><strong>1.11 修剪 - 快捷键 TR 和 延申 - 快捷键 EX</strong></h3><p><strong>修剪</strong>：tr+空格+选择基线+空格+需要修剪的线段</p>
<p><strong>延伸</strong>：ex+空格+选择基线+空格+需要延伸对象+空格</p>
<p>快速修剪和延申（不需要选择基线）<br>tr+空格+空格<br>ex+空格+空格</p>
<h3 id="1-12-圆角-快捷键-F-和-倒角-快捷键-CHA"><a href="#1-12-圆角-快捷键-F-和-倒角-快捷键-CHA" class="headerlink" title="1.12 圆角 - 快捷键 F 和 倒角 - 快捷键 CHA"></a><strong>1.12 圆角 - 快捷键 F 和 倒角 - 快捷键 CHA</strong></h3><p><strong>圆角</strong>：f+空格+r+点击两条直线</p>
<p><strong>倒角</strong>：cha+第一个倒角距离+空格+第二个倒角距离+空格+点击两条直线</p>
<p>延申为一个角：f+空格+r+输入 0+点击两条直线 或者 cha+d+空格+空格+点击两条直线</p>
<h3 id="1-13-样条曲线"><a href="#1-13-样条曲线" class="headerlink" title="1.13 样条曲线"></a>1.13 样条曲线</h3><p>样条曲线拟合</p>
<p>样条曲线控制点</p>
<h3 id="1-14-阵列"><a href="#1-14-阵列" class="headerlink" title="1.14 阵列"></a>1.14 阵列</h3><p>环形阵列</p>
<p>矩形阵列</p>
<p><font color=red>路径阵列</font></p>
<h3 id="1-15-参数化"><a href="#1-15-参数化" class="headerlink" title="1.15 参数化"></a>1.15 参数化</h3><p>先点击的图形不动，后点击的图形变动</p>
<p>ctrl 1 快速打开特性面板</p>
<p>先将图像大概绘制出来,再添加约束</p>
<h2 id="2-绘图练习"><a href="#2-绘图练习" class="headerlink" title="2 绘图练习"></a>2 绘图练习</h2><h3 id="2-1-偏移-快捷键-o"><a href="#2-1-偏移-快捷键-o" class="headerlink" title="2.1 偏移 - 快捷键 o"></a>2.1 偏移 - 快捷键 o</h3><h3 id="2-2-分解-快捷键-x"><a href="#2-2-分解-快捷键-x" class="headerlink" title="2.2 分解 - 快捷键 x"></a>2.2 分解 - 快捷键 x</h3><p>先选择对象，在输入 x 分解对象</p>
<h3 id="2-3-绘制与圆相切的直线-tan"><a href="#2-3-绘制与圆相切的直线-tan" class="headerlink" title="2.3 绘制与圆相切的直线 tan"></a>2.3 绘制与圆相切的直线 tan</h3><p>L 空格 tan 选择与圆的切点</p>
<h3 id="2-4-打断-快捷键-br"><a href="#2-4-打断-快捷键-br" class="headerlink" title="2.4 打断 - 快捷键 br"></a>2.4 打断 - 快捷键 br</h3><h3 id="2-5-构造线-快捷键-xl"><a href="#2-5-构造线-快捷键-xl" class="headerlink" title="2.5 构造线 - 快捷键 xl"></a>2.5 构造线 - 快捷键 xl</h3><p>可以设置角度辅助画图</p>
<h2 id="3-进阶"><a href="#3-进阶" class="headerlink" title="3 进阶"></a>3 进阶</h2><h3 id="3-1-选择"><a href="#3-1-选择" class="headerlink" title="3.1 选择"></a>3.1 选择</h3><p>从左上开始选择为包选，从右下开始选择为全选，</p>
<p>点击选择</p>
<p>点击反选–shilft + 鼠标左键</p>
<h3 id="3-2-匹配-快捷键-ma"><a href="#3-2-匹配-快捷键-ma" class="headerlink" title="3.2 匹配 - 快捷键 ma"></a>3.2 匹配 - 快捷键 ma</h3><p>快速复制目标样式到选择的元素上</p>
<h3 id="3-3-点-快捷键-po"><a href="#3-3-点-快捷键-po" class="headerlink" title="3.3 点 - 快捷键 po"></a>3.3 点 - 快捷键 po</h3><h3 id="3-4-重生成模型-快捷键-re"><a href="#3-4-重生成模型-快捷键-re" class="headerlink" title="3.4 重生成模型 - 快捷键 re"></a>3.4 重生成模型 - 快捷键 re</h3><h3 id="3-5-多段线操作-快捷键-pe"><a href="#3-5-多段线操作-快捷键-pe" class="headerlink" title="3.5 多段线操作 - 快捷键 pe"></a>3.5 多段线操作 - 快捷键 pe</h3><h3 id="3-6-打断-快捷键-br"><a href="#3-6-打断-快捷键-br" class="headerlink" title="3.6 打断 - 快捷键 br"></a>3.6 打断 - 快捷键 br</h3><h3 id="3-7-合并-快捷键-j"><a href="#3-7-合并-快捷键-j" class="headerlink" title="3.7 合并 - 快捷键 j"></a>3.7 合并 - 快捷键 j</h3><h3 id="3-8-定距等分-快捷键-me"><a href="#3-8-定距等分-快捷键-me" class="headerlink" title="3.8 定距等分 - 快捷键 me"></a>3.8 定距等分 - 快捷键 me</h3><h3 id="3-9-定数等分-快捷键-div"><a href="#3-9-定数等分-快捷键-div" class="headerlink" title="3.9 定数等分 - 快捷键 div"></a>3.9 定数等分 - 快捷键 div</h3><h3 id="3-10-修订云线-快捷键-revc"><a href="#3-10-修订云线-快捷键-revc" class="headerlink" title="3.10 修订云线 - 快捷键 revc"></a>3.10 修订云线 - 快捷键 revc</h3><h3 id="3-11-射线-快捷键-ray"><a href="#3-11-射线-快捷键-ray" class="headerlink" title="3.11 射线 - 快捷键 ray"></a>3.11 射线 - 快捷键 ray</h3><h3 id="3-12-填充-快捷键-h"><a href="#3-12-填充-快捷键-h" class="headerlink" title="3.12 填充 - 快捷键 h"></a>3.12 填充 - 快捷键 h</h3><h3 id="3-13-绘图次序-快捷键-dr"><a href="#3-13-绘图次序-快捷键-dr" class="headerlink" title="3.13 绘图次序 - 快捷键 dr"></a>3.13 绘图次序 - 快捷键 dr</h3>]]></content>
      <categories>
        <category>cad</category>
      </categories>
      <tags>
        <tag>CAD</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenLayers</title>
    <url>/koi/gis/openlayers/</url>
    <content><![CDATA[<h2 id="OpenLayers-基础学习"><a href="#OpenLayers-基础学习" class="headerlink" title="OpenLayers 基础学习"></a>OpenLayers 基础学习</h2><p>–快捷 <a href="https://openlayers.org/">OpenLayers 官网</a></p>
<h3 id="WebGIS-简介"><a href="#WebGIS-简介" class="headerlink" title="WebGIS 简介"></a>WebGIS 简介</h3><ul>
<li><p>GIS 的核心概念：</p>
<p>GIS（Geographic Information System）是一种用于存储、分析、管理和展示地理数据的计算机系统。以下是 GIS 中的一些核心概念：</p>
<ol>
<li>坐标系：地理数据通常以某种坐标系的形式存储，如经纬度坐标系或投影坐标系。</li>
<li>地理数据：GIS 中的数据是具有地理上的位置信息的数据，如地图、地形、道路、建筑物、人口数据等。</li>
<li>地图投影：地图投影是将三维地球表示为二维地图的过程。</li>
<li>叠加分析：叠加分析是在一张地图上查看多个图层的分析，以探究其相互关系。</li>
<li>空间分析：空间分析是指使用地理数据分析空间关系，如距离、面积和方位等。</li>
<li>地理信息数据库：GIS 的核心是地理信息数据库，用于存储和管理地理数据。</li>
<li>可视化：GIS 的目的之一是提供可视化，以方便人们更好地理解地理数据。</li>
</ol>
</li>
<li><p>地图组成结构</p>
<p><img src="https://cdn.jsdelivr.net/gh/koibaiyang/demo/img/image-20230722230958233.png" alt="image-20230722230958233"></p>
</li>
<li><p>Openlayers 的核心概念:</p>
<p>1、一张<code>Map</code>是由很多<code>Layer</code>图层组成的。</p>
<p>2、一个<code>Layer</code>对应一个<code>Source</code>矢量数据源</p>
<p>3、一个<code>Source</code>由很多<code>Feature</code>组成</p>
<p>4、<code>Feature</code>是<code>Geometry</code>和<code>Style</code>组成</p>
</li>
</ul>
<h3 id="初始化地图"><a href="#初始化地图" class="headerlink" title="初始化地图"></a>初始化地图</h3><ul>
<li><p>引入 OpenLayers 框架</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://lib.baomitu.com/ol3/4.6.5/ol.css&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://lib.baomitu.com/ol3/4.6.5/ol.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置高德地图 source</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> gaode = <span class="keyword">new</span> ol.<span class="property">layer</span>.<span class="title class_">Tile</span>(&#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;高德地图&#x27;</span>,</span><br><span class="line">  <span class="attr">source</span>: <span class="keyword">new</span> ol.<span class="property">source</span>.<span class="title function_">XYZ</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;http://wprd0&#123;1-4&#125;.is.autonavi.com/appmaptile?lang=zh_cn&amp;size=1&amp;style=7&amp;x=&#123;x&#125;&amp;y=&#123;y&#125;&amp;z=&#123;z&#125;&#x27;</span>,</span><br><span class="line">    <span class="attr">wrapX</span>: <span class="literal">false</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>初始化地图</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> ol.<span class="title class_">Map</span>(&#123;</span><br><span class="line">  <span class="attr">target</span>: <span class="string">&#x27;map&#x27;</span>, <span class="comment">// 绑定到 map 元素上</span></span><br><span class="line">  <span class="attr">layers</span>: [gaode], <span class="comment">// 设置高德图层</span></span><br><span class="line">  <span class="attr">view</span>: <span class="keyword">new</span> ol.<span class="title class_">View</span>(&#123;</span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    <span class="attr">center</span>: [<span class="number">114.3</span>, <span class="number">30.5</span>],</span><br><span class="line">    <span class="attr">zoom</span>: <span class="number">12</span>,</span><br><span class="line">    <span class="attr">projection</span>: <span class="string">&#x27;EPSG:4326&#x27;</span>, <span class="comment">// EPSG:4326 的经纬度范围是：经度范围在 -180° 到 180° 之间，纬度范围在 -90° 到 90° 之间。</span></span><br><span class="line">  &#125;),</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="拓展-EPSG-4326-和-EPSG-3857-的区别"><a href="#拓展-EPSG-4326-和-EPSG-3857-的区别" class="headerlink" title="拓展*EPSG:4326 和 EPSG:3857 的区别"></a>拓展*EPSG:4326 和 EPSG:3857 的区别</h4><p>EPSG:4326 和 EPSG:3857 是两个常用的坐标参考系代码，用于在 GIS 中表示地理位置。它们的主要区别如下：</p>
<ul>
<li>EPSG:4326 表示一个地理坐标系，使用经纬度来表示地理位置，通常用于地理位置的显示和制图。</li>
<li>EPSG:3857 表示一个 Web 墨卡托坐标系，使用平面墨卡托投影来表示地理位置。</li>
</ul>
<p>因此，两个坐标系的主要区别在于它们使用的坐标系统不同：EPSG:4326 使用的是经纬度，而 EPSG:3857 使用的是平面墨卡托投影。</p>
<p>EPSG:3857 在在线地图中被广泛使用，因为它能够在 Web 地图上提供更高的精度和更好的分辨率。然而，EPSG:4326 在网络上传输地理位置信息时被更多地使用，因为它使用的是标准的地理坐标系。</p>
<p>总的来说，选择使用哪个坐标系取决于你的应用需求：如果需要高精度和分辨率，选择 EPSG:3857；如果需要标准的地理坐标系，选择 EPSG:4326</p>
</li>
</ul>
<h3 id="地图控件"><a href="#地图控件" class="headerlink" title="地图控件"></a>地图控件</h3><ul>
<li><p><em>视图跳转控件</em></p>
<p><img src="https://cdn.jsdelivr.net/gh/koibaiyang/demo/img/image-20230723000324181.png" alt="image-20230723000324181"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//视图跳转控件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ZoomToExtent</span> = <span class="keyword">new</span> ol.<span class="property">control</span>.<span class="title class_">ZoomToExtent</span>(&#123;</span><br><span class="line">  <span class="attr">extent</span>: [<span class="number">110</span>, <span class="number">30</span>, <span class="number">160</span>, <span class="number">30</span>],</span><br><span class="line">&#125;)</span><br><span class="line">map.<span class="title function_">addControl</span>(<span class="title class_">ZoomToExtent</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>放大缩小控件</p>
<p><img src="https://cdn.jsdelivr.net/gh/koibaiyang/demo/img/image-20230723000628737.png" alt="image-20230723000628737"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 放大缩小控件</span></span><br><span class="line"><span class="keyword">const</span> zoomslider = <span class="keyword">new</span> ol.<span class="property">control</span>.<span class="title class_">ZoomSlider</span>()</span><br><span class="line">map.<span class="title function_">addControl</span>(zoomslider)</span><br></pre></td></tr></table></figure>
</li>
<li><p>全屏控件</p>
<p><img src="https://cdn.jsdelivr.net/gh/koibaiyang/demo/img/image-20230723000902601.png" alt="image-20230723000902601"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//全屏控件</span></span><br><span class="line"><span class="keyword">const</span> fullScreen = <span class="keyword">new</span> ol.<span class="property">control</span>.<span class="title class_">FullScreen</span>()</span><br><span class="line">map.<span class="title function_">addControl</span>(fullScreen)</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="设置矢量图形"><a href="#设置矢量图形" class="headerlink" title="设置矢量图形"></a>设置矢量图形</h3><p>1、通过几何信息和样式信息构建要素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> point = <span class="keyword">new</span> ol.<span class="title class_">Feature</span>(&#123;</span><br><span class="line">  <span class="comment">// 几何-点要素</span></span><br><span class="line">  <span class="attr">geometry</span>: <span class="keyword">new</span> ol.<span class="property">geom</span>.<span class="title class_">Point</span>([<span class="number">114.3</span>, <span class="number">30.5</span>]),</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> style = <span class="keyword">new</span> ol.<span class="property">style</span>.<span class="title class_">Style</span>(&#123;</span><br><span class="line">  <span class="comment">// 样式信息</span></span><br><span class="line">  <span class="attr">image</span>: <span class="keyword">new</span> ol.<span class="property">style</span>.<span class="title class_">Circle</span>(&#123;</span><br><span class="line">    <span class="attr">radius</span>: <span class="number">10</span>, <span class="comment">//半径</span></span><br><span class="line">    <span class="attr">fill</span>: <span class="keyword">new</span> ol.<span class="property">style</span>.<span class="title class_">Fill</span>(&#123;</span><br><span class="line">      <span class="attr">color</span>: <span class="string">&#x27;#ff2d51&#x27;</span>, <span class="comment">// 填充</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="attr">stroke</span>: <span class="keyword">new</span> ol.<span class="property">style</span>.<span class="title class_">Stroke</span>(&#123;</span><br><span class="line">      <span class="comment">// 阴影</span></span><br><span class="line">      <span class="attr">color</span>: <span class="string">&#x27;#333&#x27;</span>,</span><br><span class="line">      <span class="attr">width</span>: <span class="number">2</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;),</span><br><span class="line">&#125;)</span><br><span class="line">point.<span class="title function_">setStyle</span>(style)</span><br></pre></td></tr></table></figure>

<p>2、将要素添加到<code>矢量数据源</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将要素添加到矢量数据源</span></span><br><span class="line"><span class="keyword">const</span> source = <span class="keyword">new</span> ol.<span class="property">source</span>.<span class="title class_">Vector</span>(&#123;</span><br><span class="line">  <span class="attr">features</span>: [point],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>3、将矢量数据源添加到<code>矢量图层</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将矢量数据源添加到矢量图层</span></span><br><span class="line"><span class="keyword">const</span> layer = <span class="keyword">new</span> ol.<span class="property">layer</span>.<span class="title class_">Vector</span>(&#123;</span><br><span class="line">  source,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>4、将<code>矢量图层</code>添加到地图容器</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将矢量图层添加到地图容器</span></span><br><span class="line">map.<span class="title function_">addLayer</span>(layer)</span><br></pre></td></tr></table></figure>

<h3 id="加载geojson数据"><a href="#加载geojson数据" class="headerlink" title="加载geojson数据"></a>加载geojson数据</h3><p><code>geojson</code>数据是矢量数据，是包含地理信息的json数据，格式是以key:value的形式存在的。后缀以<code>geojson</code>结尾</p>
<ul>
<li><p>geojson设置一个点要素</p>
<p><img src="https://cdn.jsdelivr.net/gh/koibaiyang/demo/img/image-20230727232143141.png" alt="image-20230727232143141"></p>
<p>1.点设置</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;FeatureCollection&#x27;</span>,</span><br><span class="line">        <span class="attr">features</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;Feature&#x27;</span>,</span><br><span class="line">            <span class="attr">geometry</span>: &#123;</span><br><span class="line">              <span class="attr">type</span>: <span class="string">&#x27;Point&#x27;</span>, <span class="comment">// 设置点要素</span></span><br><span class="line">              <span class="attr">coordinates</span>: [<span class="number">114.3</span>, <span class="number">30.5</span>],</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> source = <span class="keyword">new</span> ol.<span class="property">source</span>.<span class="title class_">Vector</span>(&#123;</span><br><span class="line">        <span class="comment">/* 将geojson数据设置给实例数据源 */</span></span><br><span class="line">        <span class="attr">features</span>: <span class="keyword">new</span> ol.<span class="property">format</span>.<span class="title class_">GeoJSON</span>().<span class="title function_">readFeatures</span>(data),</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">const</span> layer = <span class="keyword">new</span> ol.<span class="property">layer</span>.<span class="title class_">Vector</span>(&#123;</span><br><span class="line">        source,</span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure>



<p>2.样式设置</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> style = <span class="keyword">new</span> ol.<span class="property">style</span>.<span class="title class_">Style</span>(&#123;</span><br><span class="line">       <span class="comment">//设置点样式</span></span><br><span class="line">       <span class="attr">image</span>: <span class="keyword">new</span> ol.<span class="property">style</span>.<span class="title class_">Circle</span>(&#123;</span><br><span class="line">         <span class="attr">radius</span>: <span class="number">8</span>,</span><br><span class="line">         <span class="attr">fill</span>: <span class="keyword">new</span> ol.<span class="property">style</span>.<span class="title class_">Fill</span>(&#123;</span><br><span class="line">           <span class="attr">color</span>: <span class="string">&#x27;#ff2d51&#x27;</span>,</span><br><span class="line">         &#125;),</span><br><span class="line">         <span class="attr">stroke</span>: <span class="keyword">new</span> ol.<span class="property">style</span>.<span class="title class_">Stroke</span>(&#123;</span><br><span class="line">           <span class="attr">color</span>: <span class="string">&#x27;#333&#x27;</span>,</span><br><span class="line">           <span class="attr">width</span>: <span class="number">2</span>,</span><br><span class="line">         &#125;),</span><br><span class="line">       &#125;),</span><br><span class="line">     &#125;)</span><br><span class="line">     layer.<span class="title function_">setStyle</span>(style)</span><br><span class="line">     map.<span class="title function_">addLayer</span>(layer)</span><br></pre></td></tr></table></figure>
</li>
<li><p>geojson设置一个线要素</p>
<p><img src="https://cdn.jsdelivr.net/gh/koibaiyang/demo/img/image-20230727232043149.png" alt="image-20230727232043149"></p>
<p>1.线设置</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;FeatureCollection&#x27;</span>,</span><br><span class="line">        <span class="attr">features</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;Feature&#x27;</span>,</span><br><span class="line">            <span class="attr">geometry</span>: &#123;</span><br><span class="line">              <span class="attr">type</span>: <span class="string">&#x27;LineString&#x27;</span>, <span class="comment">// 设置线</span></span><br><span class="line">              <span class="attr">coordinates</span>: [</span><br><span class="line">                [<span class="number">114.3</span>, <span class="number">30.5</span>],</span><br><span class="line">                [<span class="number">116</span>, <span class="number">30.5</span>],</span><br><span class="line">              ],</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<p>2.样式设置</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置样式</span></span><br><span class="line">     <span class="keyword">const</span> style = <span class="keyword">new</span> ol.<span class="property">style</span>.<span class="title class_">Style</span>(&#123;</span><br><span class="line">       <span class="comment">//边线颜色</span></span><br><span class="line">       <span class="attr">stroke</span>: <span class="keyword">new</span> ol.<span class="property">style</span>.<span class="title class_">Stroke</span>(&#123;</span><br><span class="line">         <span class="attr">color</span>: <span class="string">&#x27;#ff2d51&#x27;</span>,</span><br><span class="line">         <span class="attr">width</span>: <span class="number">4</span>,</span><br><span class="line">       &#125;),</span><br><span class="line">     &#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>geojson设置<code>Polygon</code>区</p>
<p><img src="https://cdn.jsdelivr.net/gh/koibaiyang/demo/img/image-20230727232619978.png" alt="image-20230727232619978"></p>
<p>1.polygon设置</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;FeatureCollection&quot;</span>,</span><br><span class="line">      <span class="attr">features</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                  <span class="attr">type</span>: <span class="string">&quot;Feature&quot;</span>,</span><br><span class="line">                  <span class="attr">geometry</span>: &#123;</span><br><span class="line">                        <span class="attr">type</span>: <span class="string">&quot;Polygon&quot;</span>,</span><br><span class="line">                        <span class="attr">coordinates</span>: [[[<span class="number">114.30</span>, <span class="number">30.50</span>], [<span class="number">116</span>, <span class="number">30.50</span>], [<span class="number">116</span>, <span class="number">30</span>]]]</span><br><span class="line">                  &#125;</span><br><span class="line">            &#125;</span><br><span class="line">      ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>2.样式设置</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置样式</span></span><br><span class="line"><span class="keyword">const</span> style = <span class="keyword">new</span> ol.<span class="property">style</span>.<span class="title class_">Style</span>(&#123;</span><br><span class="line">      <span class="comment">//边线颜色</span></span><br><span class="line">      <span class="attr">stroke</span>: <span class="keyword">new</span> ol.<span class="property">style</span>.<span class="title class_">Stroke</span>(&#123;</span><br><span class="line">            <span class="attr">color</span>: <span class="string">&#x27;#ff2d51&#x27;</span>,</span><br><span class="line">            <span class="attr">width</span>: <span class="number">2</span></span><br><span class="line">      &#125;),</span><br><span class="line">      <span class="comment">//设置填充色</span></span><br><span class="line">      <span class="attr">fill</span>: <span class="keyword">new</span> ol.<span class="property">style</span>.<span class="title class_">Fill</span>(&#123;</span><br><span class="line">            <span class="attr">color</span>: <span class="string">&quot;rgba(50, 50, 50, 0.3)&quot;</span></span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Canvas"><a href="#Canvas" class="headerlink" title="Canvas"></a>Canvas</h2><h2 id="高德-API-调用"><a href="#高德-API-调用" class="headerlink" title="高德 API 调用"></a>高德 API 调用</h2><h2 id="Vue3-整合-Openlayers"><a href="#Vue3-整合-Openlayers" class="headerlink" title="Vue3 整合 Openlayers"></a>Vue3 整合 Openlayers</h2>]]></content>
      <categories>
        <category>gis</category>
      </categories>
      <tags>
        <tag>GIS</tag>
      </tags>
  </entry>
  <entry>
    <title>uniappShop</title>
    <url>/koi/project/shopping/</url>
    <content><![CDATA[<h2 id="uniapp-小程序购物网站"><a href="#uniapp-小程序购物网站" class="headerlink" title="uniapp - 小程序购物网站"></a>uniapp - 小程序购物网站</h2><blockquote>
<p>基于 uniapp 开发的微信小程序商城项目</p>
</blockquote>
<h3 id="uni-app项目准备"><a href="#uni-app项目准备" class="headerlink" title="uni-app项目准备"></a>uni-app项目准备</h3><h4 id="新建uniapp项目"><a href="#新建uniapp项目" class="headerlink" title="新建uniapp项目"></a>新建uniapp项目</h4><p>选择uni-ui项目模板</p>
<p><img src="https://cdn.jsdelivr.net/gh/koibaiyang/demo/img/image-20230806193258158.png" alt="image-20230806193258158"></p>
<h4 id="把项目运行到微信开发者工具"><a href="#把项目运行到微信开发者工具" class="headerlink" title="把项目运行到微信开发者工具"></a>把项目运行到微信开发者工具</h4><ul>
<li><p>配置项目的小程序appid</p>
<p><img src="https://cdn.jsdelivr.net/gh/koibaiyang/demo/img/image-20230808111648801.png" alt="image-20230808111648801"></p>
</li>
<li><p>设置HBuilder微信开发者工具的安装路径</p>
<p><img src="https://cdn.jsdelivr.net/gh/koibaiyang/demo/img/image-20230808111836223.png" alt="image-20230808111836223"></p>
</li>
<li><p>打开微信开发者工具的服务端口设置</p>
<p><img src="https://cdn.jsdelivr.net/gh/koibaiyang/demo/img/image-20230808111950026.png" alt="image-20230808111950026"></p>
</li>
<li><p>运行到小程序</p>
<p><img src="https://cdn.jsdelivr.net/gh/koibaiyang/demo/img/image-20230808112110455.png" alt="image-20230808112110455"></p>
</li>
</ul>
<h4 id="使用-git-管理仓库"><a href="#使用-git-管理仓库" class="headerlink" title="使用 git 管理仓库"></a>使用 git 管理仓库</h4><ul>
<li>在项目根目录中新建 <code>.gitignore</code> 忽略文件，并配置如下：</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># 忽略 node_modules 目录</span><br><span class="line">/node_modules</span><br><span class="line">/unpackage/dist</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：由于我们忽略了 unpackage 目录中<strong>仅有的</strong> dist 目录，因此默认情况下， unpackage 目录不会被 Git 追踪</p>
</blockquote>
<blockquote>
<p>此时，为了让 Git 能够正常追踪 unpackage 目录，按照惯例，我们可以在 unpackage 目录下创建一个叫做 <code>.gitkeep</code> 的文件进行占位</p>
</blockquote>
<ol>
<li>打开终端，切换到项目根目录中，运行如下的命令，初始化本地 Git 仓库：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>将所有文件都加入到暂存区：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>本地提交更新：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;init project&quot;</span></span><br></pre></td></tr></table></figure>



<h3 id="tabBar"><a href="#tabBar" class="headerlink" title="tabBar"></a>tabBar</h3><h4 id="创建-tabBar-分支"><a href="#创建-tabBar-分支" class="headerlink" title="创建 tabBar 分支"></a>创建 tabBar 分支</h4><ul>
<li><p>基于 master 分支在本地创建 tabBar 子分支，用来开发和 tabBar 相关的功能</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -b tabbar</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="创建-tabBar-页面"><a href="#创建-tabBar-页面" class="headerlink" title="创建 tabBar 页面"></a>创建 tabBar 页面</h4><ul>
<li>右击 pages 文件夹新建页面，并创建 home、cate、cart、my 四个 tabBar 页面</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/koibaiyang/demo/img/image-20230808225752007.png" alt="image-20230808225752007"></p>
<h4 id="配置-tabBar-效果"><a href="#配置-tabBar-效果" class="headerlink" title="配置 tabBar 效果"></a>配置 tabBar 效果</h4><ul>
<li><p>在 pages.json 根节点配置 tabBar 项</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;tabBar&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;selectedColor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#C00000&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;list&quot;</span><span class="punctuation">:</span></span><br><span class="line">       <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;pagePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pages/home/home&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;首页&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;iconPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;static/tab_icons/home.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;selectedIconPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;static/tab_icons/home-active.png&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;pagePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pages/cate/cate&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;分类&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;iconPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;static/tab_icons/cate.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;selectedIconPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;static/tab_icons/cate-active.png&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;pagePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pages/cart/cart&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;购物车&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;iconPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;static/tab_icons/cart.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;selectedIconPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;static/tab_icons/cart-active.png&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;pagePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pages/my/my&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;我的&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;iconPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;static/tab_icons/my.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;selectedIconPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;static/tab_icons/my-active.png&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="删除默认的-index-首页"><a href="#删除默认的-index-首页" class="headerlink" title="删除默认的 index 首页"></a>删除默认的 index 首页</h4><blockquote>
<p>删除  pages&#x2F;index 文件，并在 pages.json 中将 index 这一节点删除</p>
</blockquote>
<h4 id="修改全局导航条的样式效果"><a href="#修改全局导航条的样式效果" class="headerlink" title="修改全局导航条的样式效果"></a>修改全局导航条的样式效果</h4><ul>
<li><p>在 pages.json 文件根节点设置 globalStyle</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;globalStyle&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;navigationBarTextStyle&quot;</span><span class="punctuation">:</span> <span class="string">&quot;white&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;navigationBarTitleText&quot;</span><span class="punctuation">:</span> <span class="string">&quot;koi 白羊&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;navigationBarBackgroundColor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#C00000&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;backgroundColor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#FFFFFF&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;app-plus&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">			<span class="attr">&quot;background&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#efeff4&quot;</span></span><br><span class="line">		<span class="punctuation">&#125;</span></span><br><span class="line">	<span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p>注意：页面的单独样式设置会覆盖掉globalStyle中设置的样式</p>
</blockquote>
<h4 id="分支提交与合并"><a href="#分支提交与合并" class="headerlink" title="分支提交与合并"></a>分支提交与合并</h4><ol>
<li><p>将本地的 tabbar 分支进行本地的 commit 提交：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;完成了 tabBar 的开发&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>将本地的 tabbar 分支推送到远程仓库进行保存：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push -u origin tabbar</span><br></pre></td></tr></table></figure>
</li>
<li><p>将本地的 tabbar 分支合并到本地的 master 分支：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git merge tabbar</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除本地的 tabbar 分支：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -d tabbar</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h3><h4 id="创建-home-分支"><a href="#创建-home-分支" class="headerlink" title="创建 home 分支"></a>创建 home 分支</h4><h4 id="配置网络请求"><a href="#配置网络请求" class="headerlink" title="配置网络请求"></a>配置网络请求</h4><h4 id="轮播图区域"><a href="#轮播图区域" class="headerlink" title="轮播图区域"></a>轮播图区域</h4><h4 id="分类导航区域"><a href="#分类导航区域" class="headerlink" title="分类导航区域"></a>分类导航区域</h4><h4 id="楼层区域"><a href="#楼层区域" class="headerlink" title="楼层区域"></a>楼层区域</h4><h4 id="分支合并与提交"><a href="#分支合并与提交" class="headerlink" title="分支合并与提交"></a>分支合并与提交</h4><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><h3 id="商品列表"><a href="#商品列表" class="headerlink" title="商品列表"></a>商品列表</h3><h3 id="商品详情"><a href="#商品详情" class="headerlink" title="商品详情"></a>商品详情</h3><h3 id="加入购物车"><a href="#加入购物车" class="headerlink" title="加入购物车"></a>加入购物车</h3><h3 id="购物车页面"><a href="#购物车页面" class="headerlink" title="购物车页面"></a>购物车页面</h3><h3 id="登录与支付"><a href="#登录与支付" class="headerlink" title="登录与支付"></a>登录与支付</h3><h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3>]]></content>
      <categories>
        <category>project</category>
      </categories>
      <tags>
        <tag>Weapp</tag>
      </tags>
  </entry>
  <entry>
    <title>uniapp</title>
    <url>/koi/tools/uniapp/</url>
    <content><![CDATA[<h3 id="uniapp-简介"><a href="#uniapp-简介" class="headerlink" title="uniapp 简介"></a>uniapp 简介</h3><p><strong><a href="https://uniapp.dcloud.net.cn/">uni-app </a>是一个使用 <a href="https://cn.vuejs.org/guide/introduction.html">Vue.js</a> 开发所有前端应用的框架</strong>。开发者编写一套代码，可发布到 iOS、Android、H5、以及各种小程序（微信&#x2F;支付宝&#x2F;百度&#x2F;头条&#x2F;QQ&#x2F;钉钉&#x2F;淘宝）、快应用等多个平台。</p>
<p><img src="https://cdn.jsdelivr.net/gh/koibaiyang/demo/img/image-20230806191244667.png" alt="image-20230806191244667"></p>
<h3 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h3><p>uni-app 官方推荐使用 <a href="https://www.dcloud.io/hbuilderx.html"><strong>HBuilderX</strong></a> 来开发 uni-app 类型的项目。主要好处：模板丰富、完善的智能提示、一键运行</p>
<ul>
<li><p>修改编辑器的基本设置</p>
<p>打开 Settings.json 按需进行配置</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;editor.colorScheme&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Default&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;editor.fontSize&quot;</span><span class="punctuation">:</span> <span class="number">12</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;editor.fontFamily&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Consolas&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;editor.fontFmyCHS&quot;</span><span class="punctuation">:</span> <span class="string">&quot;微软雅黑 Light&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;editor.insertSpaces&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;editor.lineHeight&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.5&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;editor.minimap.enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;editor.mouseWheelZoom&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;editor.onlyHighlightWord&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;editor.tabSize&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;editor.wordWrap&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;explorer.iconTheme&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vs-seti&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;editor.codeassist.px2rem.enabel&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;editor.codeassist.px2upx.enabel&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="uni-app项目"><a href="#uni-app项目" class="headerlink" title="uni-app项目"></a>uni-app项目</h3><h4 id="新建uniapp项目"><a href="#新建uniapp项目" class="headerlink" title="新建uniapp项目"></a>新建uniapp项目</h4><p>选择uni-ui项目模板</p>
<p><img src="https://cdn.jsdelivr.net/gh/koibaiyang/demo/img/image-20230806193258158.png" alt="image-20230806193258158"></p>
<h4 id="把项目运行到微信开发者工具"><a href="#把项目运行到微信开发者工具" class="headerlink" title="把项目运行到微信开发者工具"></a>把项目运行到微信开发者工具</h4><ul>
<li><p>配置项目的小程序appid</p>
<p><img src="https://cdn.jsdelivr.net/gh/koibaiyang/demo/img/image-20230808111648801.png" alt="image-20230808111648801"></p>
</li>
<li><p>设置HBuilder微信开发者工具的安装路径</p>
<p><img src="https://cdn.jsdelivr.net/gh/koibaiyang/demo/img/image-20230808111836223.png" alt="image-20230808111836223"></p>
</li>
<li><p>打开微信开发者工具的服务端口设置</p>
<p><img src="https://cdn.jsdelivr.net/gh/koibaiyang/demo/img/image-20230808111950026.png" alt="image-20230808111950026"></p>
</li>
<li><p>运行到小程序</p>
<p><img src="https://cdn.jsdelivr.net/gh/koibaiyang/demo/img/image-20230808112110455.png" alt="image-20230808112110455"></p>
</li>
</ul>
<h4 id="使用-git-管理仓库"><a href="#使用-git-管理仓库" class="headerlink" title="使用 git 管理仓库"></a>使用 git 管理仓库</h4><ul>
<li>在项目根目录中新建 <code>.gitignore</code> 忽略文件，并配置如下：</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># 忽略 node_modules 目录</span><br><span class="line">/node_modules</span><br><span class="line">/unpackage/dist</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：由于我们忽略了 unpackage 目录中<strong>仅有的</strong> dist 目录，因此默认情况下， unpackage 目录不会被 Git 追踪</p>
</blockquote>
<blockquote>
<p>此时，为了让 Git 能够正常追踪 unpackage 目录，按照惯例，我们可以在 unpackage 目录下创建一个叫做 <code>.gitkeep</code> 的文件进行占位</p>
</blockquote>
<ol>
<li>打开终端，切换到项目根目录中，运行如下的命令，初始化本地 Git 仓库：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>将所有文件都加入到暂存区：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>本地提交更新：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;init project&quot;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>PicGo+GitHub搭建个人图床</title>
    <url>/koi/tools/picgo/</url>
    <content><![CDATA[<h2 id="1-GitHub-创建图床仓库"><a href="#1-GitHub-创建图床仓库" class="headerlink" title="1. GitHub 创建图床仓库"></a>1. GitHub 创建图床仓库</h2><ul>
<li><p>使用你的 GitHub 账号创建一个图床仓库</p>
<p><img src="https://cdn.jsdelivr.net/gh/koibaiyang/demo/img/image-20230720214539444.png" alt="image-20230720214539444"></p>
<p>*注意仓库设置公开</p>
</li>
<li><p>复制图床仓库的路径</p>
<p>koibaiyang&#x2F;demo</p>
</li>
</ul>
<h2 id="2-下载安装-PicGo"><a href="#2-下载安装-PicGo" class="headerlink" title="2.下载安装 PicGo"></a>2.下载安装 PicGo</h2><ul>
<li><p><a href="https://github.com/Molunerfinn/PicGo/releases">PicGo 下载地址</a>下载对应的应用程序并安装</p>
<p><img src="https://cdn.jsdelivr.net/gh/koibaiyang/demo/img/image-20230720215412958.png" alt="image-20230720215412958"></p>
</li>
</ul>
<h2 id="3-配置-GitHub-图床设置"><a href="#3-配置-GitHub-图床设置" class="headerlink" title="3.配置 GitHub 图床设置"></a>3.配置 GitHub <strong>图床设置</strong></h2><ul>
<li><p>在 GitHub 账户上新建一个 token，在 settings&#x2F;developer settings 目录下新建一个 token</p>
<p><img src="https://cdn.jsdelivr.net/gh/koibaiyang/demo/img/image-20230720221210439.png" alt="image-20230720221210439"></p>
</li>
<li><p>设置 token 的名称和有效时长 → 选择 repo 这一项 → 创建 token</p>
<p><img src="https://cdn.jsdelivr.net/gh/koibaiyang/demo/img/image-20230720221625707.png" alt="image-20230720221625707"></p>
</li>
<li><p>复制你的 token</p>
<p><img src="https://cdn.jsdelivr.net/gh/koibaiyang/demo/img/image-20230720222049480.png" alt="image-20230720222049480"></p>
</li>
<li><p>打开刚刚下载好的应用程序，在图床设置里找到 GitHub 并添加一个图床</p>
<p><img src="https://cdn.jsdelivr.net/gh/koibaiyang/demo/img/image-20230720220242316.png" alt="image-20230720220242316"></p>
</li>
<li><p>设置对应的配置</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">可以使用 https://cdn.jsdelivr.net/gh</span><br><span class="line">拼接你的仓库路径 koibaiyang/demo ，设置CDN加速</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/koibaiyang/demo/img/image-20230720225922939.png" alt="image-20230720225922939"></p>
</li>
<li><p>设置完成，已经可以使用 PicGo 图床上传图片，转换为在线链接</p>
</li>
</ul>
<h2 id="4-设置-Typora-快速上传偏好"><a href="#4-设置-Typora-快速上传偏好" class="headerlink" title="4.设置 Typora 快速上传偏好"></a>4.设置 Typora 快速上传偏好</h2><ul>
<li><p>打开 Typora 的偏好设置 ，选择 PicGo 上传服务设定</p>
<p><img src="https://cdn.jsdelivr.net/gh/koibaiyang/demo/img/image-20230720224157081.png" alt="image-20230720224157081"></p>
</li>
<li><p>完成后就可以快捷上传文档里的本地图片并自动转换成在线地址</p>
<p><img src="https://cdn.jsdelivr.net/gh/koibaiyang/demo/img/image-20230720230821697.png" alt="image-20230720230821697"></p>
</li>
<li><p><img src="https://cdn.jsdelivr.net/gh/koibaiyang/demo/img/image-20230720230904282.png" alt="image-20230720230904282"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>Axios</title>
    <url>/koi/web/axios/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML</title>
    <url>/koi/web/html/</url>
    <content><![CDATA[<h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><h3 id="HTML-简介"><a href="#HTML-简介" class="headerlink" title="HTML 简介"></a>HTML 简介</h3><p>HTML 是用来描述网页的一种语言，指的是超文本标记语言 (<strong>H</strong>yper <strong>T</strong>ext <strong>M</strong>arkup <strong>L</strong>anguage)，HTML 不是一种编程语言。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="HTML-标签"><a href="#HTML-标签" class="headerlink" title="HTML 标签"></a>HTML 标签</h3><h2 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h2><h2 id="XHTML"><a href="#XHTML" class="headerlink" title="XHTML"></a>XHTML</h2>]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS</title>
    <url>/koi/web/css/</url>
    <content><![CDATA[<h2 id="CSS-自定义属性（变量）"><a href="#CSS-自定义属性（变量）" class="headerlink" title="CSS 自定义属性（变量）"></a>CSS 自定义属性（变量）</h2><p>由自定义属性标记设定值（比如： **<code>--main-color: black;</code>**），由 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/var">var()</a> 函数来获取值（比如： <code>color: var(--main-color);</code>）</p>
<h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>声明一个自定义属性，属性名需要以两个减号（<code>--</code>）开始，属性值则可以是任何有效的 CSS 值。和其他属性一样，自定义属性也是写在规则集之内的</p>
<ul>
<li><p>声明</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* -- 声明自定义属性 */</span></span><br><span class="line">element &#123;</span><br><span class="line">  <span class="attr">--main-bg-color</span>: brown;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* :root 全局生效 */</span></span><br><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="attr">--main-bg-color</span>: brown;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 通过 var() 使用 */</span></span><br><span class="line">element &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--main-bg-color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="CSS-选择器"><a href="#CSS-选择器" class="headerlink" title="CSS 选择器"></a>CSS 选择器</h2><h3 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h3><ul>
<li>通过标签名选择元素</li>
<li>优点：可快速为同类型标签统一设置样式</li>
<li>缺点：不能涉及差异化样式，只能选择全部标签</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h3><ul>
<li>通过类名选择元素</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="id-选择器"><a href="#id-选择器" class="headerlink" title="id 选择器"></a>id 选择器</h3><ul>
<li>通过元素 id 属性选择元素</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#md</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">600</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="通配符选择器"><a href="#通配符选择器" class="headerlink" title="通配符选择器"></a>通配符选择器</h3><ul>
<li>选择页面所有元素</li>
<li>用于清除内外边距</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="相邻选择器"><a href="#相邻选择器" class="headerlink" title="相邻选择器"></a>相邻选择器</h3><ul>
<li>选择所有指定元素的相邻后一个兄弟节点</li>
</ul>
<p>html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>h1-2<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>p0 被选中<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;good&quot;</span>&gt;</span>h1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>p1 被选中<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>p2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>css</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> + <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h3><ul>
<li>在所有后代节点中选</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="子选择器"><a href="#子选择器" class="headerlink" title="子选择器"></a>子选择器</h3><ul>
<li>只在亲儿子中选</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &gt; <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="并集选择器"><a href="#并集选择器" class="headerlink" title="并集选择器"></a>并集选择器</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>,</span><br><span class="line"><span class="selector-tag">h2</span>,</span><br><span class="line"><span class="selector-tag">h3</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="交集选择器"><a href="#交集选择器" class="headerlink" title="交集选择器"></a>交集选择器</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-class">.good</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h3><ul>
<li>根据元素状态或所处 DOM 结构选择元素</li>
</ul>
<h4 id="动态伪类选择器"><a href="#动态伪类选择器" class="headerlink" title="动态伪类选择器"></a>动态伪类选择器</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">按这个顺序声明</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> 链接一开始的样式</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> 链接访问后的样式</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> 光标经过链接的样式</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> 链接被按下时的样式</span><br><span class="line"></span><br><span class="line"><span class="selector-pseudo">:focus</span> 用于选择获取焦点的表单元素，一般针对表单元素而言</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:focus</span></span><br><span class="line"><span class="selector-tag">textarea</span><span class="selector-pseudo">:focus</span></span><br></pre></td></tr></table></figure>

<h4 id="结构伪类选择器-C3"><a href="#结构伪类选择器-C3" class="headerlink" title="结构伪类选择器(C3)"></a>结构伪类选择器(C3)</h4><table>
<thead>
<tr>
<th align="center">选择符</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">E:first-child</td>
<td align="center">第一个子元素 E</td>
</tr>
<tr>
<td align="center">E:last-child</td>
<td align="center">最后一个子元素 E</td>
</tr>
<tr>
<td align="center">E:nth-child(n)</td>
<td align="center">第 n 个子元素 E</td>
</tr>
<tr>
<td align="center">E:first-of-type</td>
<td align="center">指定元素 E 的第一个</td>
</tr>
<tr>
<td align="center">E:last-of-type</td>
<td align="center">指定元素 E 的最后一个</td>
</tr>
<tr>
<td align="center">E:nth-of-type(n)</td>
<td align="center">指定元素 E 的第 n 个</td>
</tr>
</tbody></table>
<ul>
<li>n 可以是数字、关键字（even，odd）、公式（n 从 0 开始）</li>
<li>nth-child 先找父亲的第 n 个孩子，再看是否为元素 E，是成功，否失败</li>
<li>nth-of-type 是直接找第 n 个 E，忽略其他非 E 的元素</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>4<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 啥都选不到 */</span></span><br><span class="line"><span class="selector-tag">div</span> &gt; <span class="selector-tag">p</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 选到2号p标签 */</span></span><br><span class="line"><span class="selector-tag">div</span> &gt; <span class="selector-tag">p</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">2</span>) &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="属性选择器-C3"><a href="#属性选择器-C3" class="headerlink" title="属性选择器(C3)"></a>属性选择器(C3)</h3><table>
<thead>
<tr>
<th align="left">选择符</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">E[att]</td>
<td align="left">选择具有 att 属性的 E 元素</td>
</tr>
<tr>
<td align="left">E[att&#x3D;”val”]</td>
<td align="left">选择具有 att 属性且属性值等于 val 的 E 元素</td>
</tr>
<tr>
<td align="left">E[att^&#x3D;”val”]</td>
<td align="left">选择具有 att 属性且属性值以 val 开头的 E 元素</td>
</tr>
<tr>
<td align="left">E[att$&#x3D;”val”]</td>
<td align="left">选择具有 att 属性且属性值以 val 结尾的 E 元素</td>
</tr>
<tr>
<td align="left">E[att*&#x3D;”val”]</td>
<td align="left">选择具有 att 属性且属性值含有 val 的 E 元素</td>
</tr>
</tbody></table>
<h3 id="伪元素选择器-C3"><a href="#伪元素选择器-C3" class="headerlink" title="伪元素选择器(C3)"></a>伪元素选择器(C3)</h3><ul>
<li>伪元素选择器利用 CSS 创建新标签元素，而不需要 HTML 标签，从而简化 HTML 结构</li>
<li>before 和 after 创建了一个行内元素，在 DOM 树中无法找到，故为伪元素</li>
<li>必须有 content 属性</li>
</ul>
<table>
<thead>
<tr>
<th align="left">选择器</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">::before</td>
<td align="left">在元素内部前面插入内容</td>
</tr>
<tr>
<td align="left">::after</td>
<td align="left">在元素内部后面插入内容</td>
</tr>
</tbody></table>
<p>伪元素字体图标</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;\e91e&#x27;</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>伪元素清除浮动</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、额外标签法（隔墙法）</span><br><span class="line">在浮动元素后面添加一个块级标签（如<span class="selector-tag">div</span>），并设置 <span class="attribute">clear</span>: both</span><br><span class="line"></span><br><span class="line">&lt;div style=<span class="string">&quot;clear:both&quot;</span> &gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、父级元素添加overflow，将其属性值设置为 hidden、 auto 或 scroll</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、父级添加after伪元素</span><br><span class="line">.clearfix:after &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>; 必须要有<span class="attribute">content</span>属性</span><br><span class="line">  <span class="attribute">display</span>: block; 块级元素</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>; 不要看见该元素</span><br><span class="line">  <span class="attribute">clear</span>: both; 核心代码清除浮动</span><br><span class="line">  <span class="attribute">visibility</span>: hidden; 不要看见该元素</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span> &#123; <span class="comment">/* IE6、 7 专有 */</span></span><br><span class="line">  *zoom: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、父级元素添加双伪元素</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:before</span>,<span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>:<span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">display</span>:table; 转换为块级元素并一行显示</span><br><span class="line">&#125; .</span><br><span class="line">clearfix<span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">clear</span>:both;</span><br><span class="line">&#125; .</span><br><span class="line">clearfix &#123;</span><br><span class="line">  *zoom:<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://juejin.cn/post/6976646049456717838">相关链接</a></p>
<h2 id="CSS-Modules"><a href="#CSS-Modules" class="headerlink" title="CSS Modules"></a>CSS Modules</h2><p>CSS 不是编程语言，是一种网页样式描述的手段。</p>
<p>但程序员希望将其改造得像编程语言，于是 scss、less 出现了。</p>
<p>而 CSS Modules 为 CSS 增加了<strong>局部作用域</strong>和<strong>模块依赖</strong>两个功能。</p>
<h3 id="局部作用域"><a href="#局部作用域" class="headerlink" title="局部作用域"></a>局部作用域</h3><p>我们都知道，CSS 是全局生效的，每个组件的样式都会对全局起作用。</p>
<p>要产生局部作用域，即避免样式冲突，就是使用唯一的类名。</p>
<p>但我们无法保证自己的类名不会与别人重复。</p>
<p>此时，CSS Modules 就有用武之地了。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.title</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> style <span class="keyword">from</span> <span class="string">&#x27;./App.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">className</span>=<span class="string">&#123;style.title&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      Hello World</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p><code>style.title</code> 会被构建工具编译成哈希字符串</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;_3zyde4l1yATCOkgn-DBWEL&quot;</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">._3zyde4l1yATCOkgn-DBWEL &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样，类名就是唯一的了。</p>
<h4 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h4><p><a href="http://www.ruanyifeng.com/blog/2016/06/css_modules.html">CSS Modules 用法教程</a></p>
<h2 id="CSS-隐藏元素"><a href="#CSS-隐藏元素" class="headerlink" title="CSS 隐藏元素"></a>CSS 隐藏元素</h2><h4 id="1、设置-display-none"><a href="#1、设置-display-none" class="headerlink" title="1、设置 display: none"></a>1、设置 <code>display: none</code></h4><ul>
<li>隐藏元素不再占有原来位置，因此会导致页面布局改变，引起重排</li>
<li>子元素无法通过设置 <code>display: block</code> 实现反隐藏</li>
<li>隐藏元素绑定的事件不会触发</li>
</ul>
<h4 id="2、设置-visibility-hidden"><a href="#2、设置-visibility-hidden" class="headerlink" title="2、设置 visibility: hidden"></a>2、设置 <code>visibility: hidden</code></h4><ul>
<li>隐藏元素占有原来位置，实现的是视觉上的隐藏</li>
<li>子元素可通过设置 <code>visibility: visible</code> 显示自己</li>
<li>隐藏元素绑定的事件不会触发，如点击事件</li>
</ul>
<h4 id="3、设置-opacity-0"><a href="#3、设置-opacity-0" class="headerlink" title="3、设置 opacity: 0"></a>3、设置 <code>opacity: 0</code></h4><ul>
<li>通过设置透明度为 0 来隐藏元素，因此占有原来位置</li>
<li>子元素无法通过设置 <code>opacity: 1</code> 显示自己</li>
<li><code>opacity: 0</code> 的元素仍然能触发已绑定的事件</li>
</ul>
<h4 id="4、利用绝对定位-position-absolute"><a href="#4、利用绝对定位-position-absolute" class="headerlink" title="4、利用绝对定位 position: absolute"></a>4、利用绝对定位 <code>position: absolute</code></h4><ul>
<li>将 <code>top</code> 和 <code>left</code> 设置为足够大的负数，使其离开屏幕，即可实现隐藏效果</li>
<li>绝对定位的元素是脱标的，不会影响页面布局</li>
</ul>
<h4 id="相关链接："><a href="#相关链接：" class="headerlink" title="相关链接："></a>相关链接：</h4><p><a href="https://www.html.cn/qa/css3/14720.html">css 隐藏元素的几种方法是什么？</a></p>
<h2 id="CSS-定位"><a href="#CSS-定位" class="headerlink" title="CSS 定位"></a>CSS 定位</h2><h3 id="静态定位-static"><a href="#静态定位-static" class="headerlink" title="静态定位 static"></a>静态定位 static</h3><p>默认定位，相当于没有定位。</p>
<h3 id="相对定位-relative"><a href="#相对定位-relative" class="headerlink" title="相对定位 relative"></a>相对定位 relative</h3><ul>
<li>相对于元素原本的位置进行偏移</li>
<li>元素会浮起来，脱离标准流，但仍然占据原本的位置</li>
</ul>
<h3 id="绝对定位-absolute"><a href="#绝对定位-absolute" class="headerlink" title="绝对定位 absolute"></a>绝对定位 absolute</h3><ul>
<li>相对于最近的具有定位属性的父元素进行偏移，若没有，则相对于 <code>body</code> 进行偏移</li>
<li>元素脱离标准流，且不占据原本的位置</li>
<li>通常是“子绝父相”</li>
</ul>
<h3 id="固定定位-fixed"><a href="#固定定位-fixed" class="headerlink" title="固定定位 fixed"></a>固定定位 fixed</h3><ul>
<li>相对于浏览器窗口进行偏移</li>
<li>不会随着浏览器窗口的滚动而滚动</li>
<li>可用于创建固定头部、底部</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 创建全屏遮罩</span><br><span class="line"><span class="selector-class">.mask</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.25</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="相关链接-1"><a href="#相关链接-1" class="headerlink" title="相关链接"></a>相关链接</h4><p><a href="https://blog.csdn.net/weixin_38055381/article/details/81558288">CSS 的几种定位详解</a></p>
<h2 id="CSS-global"><a href="#CSS-global" class="headerlink" title="CSS :global"></a>CSS <code>:global</code></h2><p>在 CSS 局部作用域覆盖默认样式。</p>
<p>如覆盖 Ant Design 组件的默认样式。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// index<span class="selector-class">.module</span><span class="selector-class">.scss</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">:global &#123;</span><br><span class="line">  // antd 的默认样式被覆盖</span><br><span class="line">  <span class="selector-class">.ant-form-head</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Form</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;antd&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">&#x27;./index.module.scss&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">const</span> <span class="title function_">Hello</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;styles.father&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Form</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="相关链接-2"><a href="#相关链接-2" class="headerlink" title="相关链接"></a>相关链接</h4><p><a href="https://blog.csdn.net/qq_36209248/article/details/90603474">CSS 中的 global</a></p>
<h2 id="CSS-属性浏览器私有前缀"><a href="#CSS-属性浏览器私有前缀" class="headerlink" title="CSS 属性浏览器私有前缀"></a>CSS 属性浏览器私有前缀</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">Google Chrome、Safari：-webkit-</span><br><span class="line">Firefox：-moz-</span><br><span class="line">IE：-ms-</span><br><span class="line">Opera：-o-</span><br></pre></td></tr></table></figure>

<p>私有前缀是为了兼容老版本的浏览器。</p>
<p>什么是兼容？可以简单理解为一段代码在新的浏览器能正常运行，在老版本的浏览器也能正常运行。</p>
<p>对于一些新的 CSS 属性，老浏览器可能运行异常，通过添加私有前缀，让这个属性只在指定内核的浏览器生效，老浏览器就忽略这个属性。</p>
<p>等到该属性成熟、所有浏览器都支持后，就可以去掉私有前缀。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">color</span>: black;</span><br><span class="line">  -webkit-text-stroke: <span class="number">2px</span> red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="相关链接-3"><a href="#相关链接-3" class="headerlink" title="相关链接"></a>相关链接</h4><p><a href="https://blog.csdn.net/Dreammin/article/details/104663120">浏览器的私有前缀理解</a></p>
<p><a href="https://blog.csdn.net/wyx100/article/details/50450728">-moz、-ms、-webkit 浏览器私有前缀详解，作用、出处</a></p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>React</title>
    <url>/koi/web/react/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript</title>
    <url>/koi/web/js/</url>
    <content><![CDATA[<h2 id="前端-javascript-学习"><a href="#前端-javascript-学习" class="headerlink" title="前端 javascript 学习"></a>前端 javascript 学习</h2>]]></content>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>NodeJs</title>
    <url>/koi/web/nodejs/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>NodeJS</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue</title>
    <url>/koi/web/vue/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript</title>
    <url>/koi/web/ts/</url>
    <content><![CDATA[<h2 id="前端-ts-学习"><a href="#前端-ts-学习" class="headerlink" title="前端 ts 学习"></a>前端 ts 学习</h2>]]></content>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>小程序开发</title>
    <url>/koi/web/xcx/</url>
    <content><![CDATA[<h1 id="小程序基础"><a href="#小程序基础" class="headerlink" title="小程序基础"></a>小程序基础</h1><hr>
<h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><h3 id="常用的视图容器类组件"><a href="#常用的视图容器类组件" class="headerlink" title="常用的视图容器类组件"></a>常用的视图容器类组件</h3><h4 id="view"><a href="#view" class="headerlink" title="view"></a>view</h4><ul>
<li>普通视图区域</li>
<li>类似于 HTML 中的 div，是一个块级元素</li>
<li>常用于来实现页面的布局效果</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;view class=&quot;container1&quot;&gt;</span><br><span class="line">  &lt;view&gt;</span><br><span class="line">    AA</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">  &lt;view&gt;</span><br><span class="line">    BB</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">  &lt;view&gt;</span><br><span class="line">    CC</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/koibaiyang/demo/img/image-20230722204557299.png" alt="image-20230722204557299"></p>
<h4 id="scroll-view"><a href="#scroll-view" class="headerlink" title="scroll-view"></a>scroll-view</h4><ul>
<li>可滚动的视图区域</li>
<li>常用来实现滚动列表效果</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;scroll-view scroll-y class=&quot;container2&quot;&gt;</span><br><span class="line">  &lt;view&gt;</span><br><span class="line">    A</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">  &lt;view&gt;</span><br><span class="line">    B</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">  &lt;view&gt;</span><br><span class="line">    C</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">&lt;/scroll-view&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/koibaiyang/demo/img/image-20230722204837686.png" alt="image-20230722204837686"></p>
<p>可以给 scroll-view 标签添加 scroll-y、scroll-x 属性开启滚动效果，但是需要给 scroll-view 元素设置高度</p>
<h4 id="swiper-和-swiper-item"><a href="#swiper-和-swiper-item" class="headerlink" title="swiper 和 swiper-item"></a>swiper 和 swiper-item</h4><ul>
<li>轮播图组件和轮播图 item 组件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;swiper class=&quot;swiper-container&quot; indicator-dots indicator-color=&quot;gray&quot; indicator-active-color=&quot;white&quot; autoplay interval=&quot;2500&quot; circular&gt;</span><br><span class="line">  &lt;swiper-item&gt;</span><br><span class="line">    &lt;view&gt;</span><br><span class="line">      A</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">  &lt;/swiper-item&gt;</span><br><span class="line">  &lt;swiper-item&gt;</span><br><span class="line">    &lt;view&gt;</span><br><span class="line">      B</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">  &lt;/swiper-item&gt;</span><br><span class="line">  &lt;swiper-item&gt;</span><br><span class="line">    &lt;view&gt;</span><br><span class="line">      C</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">  &lt;/swiper-item&gt;</span><br><span class="line">&lt;/swiper&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/koibaiyang/demo/img/image-20230722205119915.png" alt="image-20230722205119915"></p>
<table>
<thead>
<tr>
<th>属性</th>
<th>类型</th>
<th>默认值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>indicator-dots</td>
<td>boolean</td>
<td>false</td>
<td>是否显示面板之时点</td>
</tr>
<tr>
<td>indicator-color</td>
<td>color</td>
<td>rgba(0,0,0,.3)</td>
<td>指示点颜色</td>
</tr>
<tr>
<td>indicator-active-color</td>
<td>color</td>
<td>#000000</td>
<td>当前指示点的颜色</td>
</tr>
<tr>
<td>autoplay</td>
<td>boolean</td>
<td>false</td>
<td>是否自动切换</td>
</tr>
<tr>
<td>interval</td>
<td>number</td>
<td>5000</td>
<td>自动切换时间间隔</td>
</tr>
<tr>
<td>circular</td>
<td>boolean</td>
<td>false</td>
<td>是否衔接滑动</td>
</tr>
</tbody></table>
<h3 id="常用的基础内容组件"><a href="#常用的基础内容组件" class="headerlink" title="常用的基础内容组件"></a>常用的基础内容组件</h3><ul>
<li><p>text</p>
<p>文本组件</p>
<p>类似于 HTML 中的 span 标签，是一个行内元素</p>
<p>text 标签添加 user-select 属性可以设置文本选中复制</p>
</li>
<li><p>rich-text</p>
<p>富文本组件</p>
<p>支持把 HTML 字符串渲染为 WXML 结构</p>
<p>rich-text 标签的 nodes 属性可以渲染 HTML 标签</p>
</li>
</ul>
<h3 id="其它常用组件"><a href="#其它常用组件" class="headerlink" title="其它常用组件"></a>其它常用组件</h3><ul>
<li><p>button</p>
<p>按钮组件</p>
<p>功能比 HTML 中的 button 按钮丰富</p>
<p>通过 open-type 属性可以调用微信提供的各种功能（客服、转发、获取用户授权、获取用户信息等）</p>
</li>
<li><p>image</p>
<p>图片组件</p>
<p>默认宽度 300px 、高度 240px</p>
</li>
<li><p>navigator</p>
<p>网页导航组件</p>
<p>类似于 HTML 中的 a 链接</p>
</li>
</ul>
<p>在小程序开发文件中 &#x2F; 为根目录</p>
<h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><h3 id="事件监听-API"><a href="#事件监听-API" class="headerlink" title="事件监听 API"></a>事件监听 API</h3><ul>
<li>特点：以 on 开头，用来监听某些事件的触发</li>
<li>如：wx.onWindowResize(function cb)监听窗口尺寸的变化</li>
</ul>
<h3 id="同步-API"><a href="#同步-API" class="headerlink" title="同步 API"></a>同步 API</h3><ul>
<li>特点 1：以 Sync 结尾的 API 都是同步 API</li>
<li>特点 2：同步 API 的执行结果，可以通过函数返回值直接获取，如果执行错误会抛出异常</li>
<li>如：wx.setStorageSync(‘key’, ‘value’)向本地存储中写入内容</li>
</ul>
<h3 id="异步-API"><a href="#异步-API" class="headerlink" title="异步 API"></a>异步 API</h3><ul>
<li>特点：类似于 jQuery 中的$.ajax(options)函数，需要通过 sucess、fail、complete 接受调用的结果</li>
<li>如：wx.request()发起的网络请求，通过 success 回调函数接收数据</li>
</ul>
<h2 id="WXML-模板语法"><a href="#WXML-模板语法" class="headerlink" title="WXML 模板语法"></a>WXML 模板语法</h2><h3 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h3><p>动态绑定内容：声明数据在.js 文件的 date 节点下，可以通过插值表达式”双大括号”语法渲染到页面中</p>
<p>动态绑定属性：在属性值中使用插值表达式语法渲染内容</p>
<h3 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h3><ul>
<li><p>小程序中常用的事件</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>绑定方式</th>
<th>事件描述</th>
</tr>
</thead>
<tbody><tr>
<td>tap</td>
<td>bindtap 或 bind:tap</td>
<td>手指触摸后马上离开，类似于 click 事件</td>
</tr>
<tr>
<td>input</td>
<td>bindinput 或 bind:input</td>
<td>文本框的输入事件</td>
</tr>
<tr>
<td>change</td>
<td>bindchange 或 bind:change</td>
<td>状态改变时触发</td>
</tr>
</tbody></table>
</li>
<li><p>事件对象的属性列表</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>type</td>
<td>String</td>
<td>事件类型</td>
</tr>
<tr>
<td>timeStamp</td>
<td>Integer</td>
<td>页面打开到触发事件所经过的毫秒数</td>
</tr>
<tr>
<td><code>target</code></td>
<td>Object</td>
<td>触发事件的组件的一些属性值集合</td>
</tr>
<tr>
<td>currentTarget</td>
<td>Object</td>
<td>当前组件的一些属性值集合</td>
</tr>
<tr>
<td>detail</td>
<td>Object</td>
<td>额外的信息</td>
</tr>
<tr>
<td>touches</td>
<td>Array</td>
<td>触摸事件，当前停留在屏幕中触摸点信息的数组</td>
</tr>
<tr>
<td>changedTouches</td>
<td>Array</td>
<td>触摸事件，当前变化的触摸点信息的数组</td>
</tr>
</tbody></table>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/koibaiyang/picgodemo/img/image-20230718124815551.png" alt="image-20230718124815551"></p>
<p><img src="https://cdn.jsdelivr.net/gh/koibaiyang/picgodemo/img/image-20230718125629987.png" alt="image-20230718125629987"></p>
<ul>
<li>在事件处理函数中可以通过 event.target.dataset.参数名 拿到参数</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/koibaiyang/picgodemo/img/image-20230718130352934.png" alt="image-20230718130352934"></p>
<h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3><p><img src="https://cdn.jsdelivr.net/gh/koibaiyang/picgodemo/img/image-20230718132404577.png" alt="image-20230718132404577"></p>
<p><img src="https://cdn.jsdelivr.net/gh/koibaiyang/picgodemo/img/image-20230718132815561.png" alt="image-20230718132815561"></p>
<p><img src="https://cdn.jsdelivr.net/gh/koibaiyang/picgodemo/img/image-20230718133417903.png" alt="image-20230718133417903"></p>
<p>vx:if 动态创建删除元素</p>
<p>hidden 给元素设置样式控制显示与隐藏</p>
<h3 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h3><p><img src="https://cdn.jsdelivr.net/gh/koibaiyang/demo/img/image-20230722205418019.png" alt="image-20230722205418019"></p>
<ul>
<li>wx:for-index、wx:for-item 属性可以指定 index 索引名称和 item 项的名称</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/koibaiyang/demo/img/image-20230722210113746.png" alt="image-20230722210113746"></p>
<ul>
<li>指定 key 时，不需要要插值语法</li>
</ul>
<h2 id="WXSS-模版样式"><a href="#WXSS-模版样式" class="headerlink" title="WXSS 模版样式"></a>WXSS 模版样式</h2><ul>
<li><p>WXSS (WeiXin Style Sheets)是一套样式语言，用于美化 WXML 的组件样式，类似于网页开发中的 CSS</p>
</li>
<li><p>WXSS 具有 CSS 大部分特性，同时，WXSS 还对 CSS 进行了扩充以及修改，以适应微信小程序的开发。</p>
<p>与 CSS 相比，WXSS 扩展的特性有：</p>
<ul>
<li><p>rpx 尺寸单位</p>
<p>rpx 的实现原理非常简单：鉴于不同设备屏幕的大小不同，为了实现屏幕的自动适配，rpx 把所有设备的屏幕，在宽度上等分为 750 份（即：当前屏幕的总宽度为 750rpx）</p>
<p>如：在 iPhone6 上，屏幕宽度为 375px，共有 750 个物理像素，等分为 750rpx。则： 2rpx &#x3D; 1px</p>
</li>
<li><p>@import 样式导入</p>
<p>@import 后跟需要导入的外联样式表的相对路径</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@import: &#x27;/common/common.wxss&#x27;;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>app.wxss 中的样式为全局样式，作用于每一个页面。</p>
<p>在页面的 .wxss 文件中定义的样式为局部样式，只作用于当前页面。</p>
<p>① 当局部样式和全局样式冲突时，根据就近原则，局部样式会覆盖全局样式</p>
<p>② 当局部样式的权重大于或等于全局样式的权重时，才会覆盖全局的样式</p>
</li>
</ul>
<h2 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h2><p>小程序根目录下的 app.json 文件是小程序的全局配置文件。常用的配置项如下：</p>
<p>① pages（记录当前小程序所有页面的存放路径）</p>
<p>② windowl（全局设置小程序窗口的外观）</p>
<p>③ tabBarl（设置小程序底部的 tabBar 效果）</p>
<p>④ stylel（是否启用新版的组件样式）</p>
<h3 id="小程序窗口的组成部分"><a href="#小程序窗口的组成部分" class="headerlink" title="小程序窗口的组成部分"></a><strong>小程序窗口的组成部分</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/koibaiyang/demo/img/image-20230722223202337.png" alt="image-20230722223202337"></p>
<h3 id="window-节点常用配置项"><a href="#window-节点常用配置项" class="headerlink" title="window 节点常用配置项"></a>window 节点常用配置项</h3><table>
<thead>
<tr>
<th><strong>属性名</strong></th>
<th><strong>类型</strong></th>
<th><strong>默认值</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>navigationBarTitleText</td>
<td>String</td>
<td>字符串</td>
<td>导航栏标题文字内容</td>
</tr>
<tr>
<td>navigationBarBackgroundColor</td>
<td>HexColor</td>
<td>#000000</td>
<td>导航栏背景颜色，如 #000000</td>
</tr>
<tr>
<td>navigationBarTextStyle</td>
<td>String</td>
<td>white</td>
<td>导航栏标题颜色，<code>仅支持 black / white</code></td>
</tr>
<tr>
<td>backgroundColor</td>
<td>HexColor</td>
<td>#ffffff</td>
<td>窗口的背景色</td>
</tr>
<tr>
<td>backgroundTextStyle</td>
<td>String</td>
<td>dark</td>
<td>下拉 loading 的样式，仅支持 dark &#x2F; light</td>
</tr>
<tr>
<td>enablePullDownRefresh</td>
<td>Boolean</td>
<td>false</td>
<td>是否全局开启下拉刷新</td>
</tr>
<tr>
<td>onReachBottomDistance</td>
<td>Number</td>
<td>50</td>
<td>页面上拉触底事件触发时距页面底部距离，单位为 px</td>
</tr>
</tbody></table>
<h3 id="tabBar"><a href="#tabBar" class="headerlink" title="tabBar"></a><strong>tabBar</strong></h3><ul>
<li><p>tabBar 是移动端应用常见的页面效果，用于实现多页面的快速切换。小程序中通常将其分为：底部 tabBar，顶部 tabBar</p>
</li>
<li><p><code>tabBar中只能配置最少 2 个、最多 5 个 tab 页签</code>，当渲染顶部 tabBar 时，不显示 icon，只显示文本</p>
</li>
<li><p>组成部分</p>
<p><img src="https://cdn.jsdelivr.net/gh/koibaiyang/demo/img/image-20230723185305005.png" alt="image-20230723185305005"></p>
</li>
<li><p><strong>tabBar</strong>节点的配置项（在 app.json 中，与 window 节点平级）</p>
<table>
<thead>
<tr>
<th><strong>属性</strong></th>
<th><strong>类型</strong></th>
<th><strong>必填</strong></th>
<th><strong>默认值</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>position</td>
<td>String</td>
<td>否</td>
<td>bottom</td>
<td>tabBar 的位置，仅支持 bottom&#x2F;top</td>
</tr>
<tr>
<td>borderStyle</td>
<td>String</td>
<td>否</td>
<td>black</td>
<td>tabBar 上边框的颜色，仅支持 black&#x2F;white</td>
</tr>
<tr>
<td>color</td>
<td>HexColor</td>
<td>否</td>
<td></td>
<td>tab 上文字的默认（未选中）颜色</td>
</tr>
<tr>
<td>selectedColor</td>
<td>HexColor</td>
<td>否</td>
<td></td>
<td>tab 上的文字选中时的颜色</td>
</tr>
<tr>
<td>backgroundColor</td>
<td>HexColor</td>
<td>否</td>
<td></td>
<td>tabBar 的背景色</td>
</tr>
<tr>
<td><code>list  </code></td>
<td>Array</td>
<td><code>是 </code></td>
<td></td>
<td>tab 页签的列表， 最少 2 个、最多 5 个 tab</td>
</tr>
</tbody></table>
<p><code>tab项的路由要配置到pages节点上面，防止页面不显示</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/koibaiyang/demo/img/image-20230723191019206.png" alt="image-20230723191019206"></p>
</li>
<li><p><strong>每个</strong> <strong>tab</strong> <strong>项的配置选项</strong></p>
<table>
<thead>
<tr>
<th><strong>属性</strong></th>
<th><strong>类型</strong></th>
<th><strong>必填</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td><code>pagePath  </code></td>
<td>String</td>
<td><code>是 </code></td>
<td>页面路径，页面必须在 pages 中预先定义</td>
</tr>
<tr>
<td><code>text  </code></td>
<td>String</td>
<td><code>是</code></td>
<td>tab 上显示的文字</td>
</tr>
<tr>
<td>iconPath</td>
<td>String</td>
<td>. 否</td>
<td>未选中时的图标路径；当 postion 为 top 时，不显示 icon</td>
</tr>
<tr>
<td>selectedIconPath</td>
<td>String</td>
<td>否</td>
<td>选中时的图标路径；当 postion 为 top 时，不显示 icon</td>
</tr>
</tbody></table>
<p><img src="https://cdn.jsdelivr.net/gh/koibaiyang/demo/img/image-20230723191817708.png" alt="image-20230723191817708"></p>
</li>
</ul>
<h2 id="页面配置"><a href="#页面配置" class="headerlink" title="页面配置"></a>页面配置</h2><ul>
<li><p>每个页面都有自己的 .json 配置文件，用来对当前页面的窗口外观、页面效果等进行配置。</p>
</li>
<li><p>页面配置中常用的配置项</p>
<table>
<thead>
<tr>
<th><strong>属性</strong></th>
<th><strong>类型</strong></th>
<th><strong>默认值</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>navigationBarBackgroundColor</td>
<td>HexColor</td>
<td>#000000</td>
<td>当前页面导航栏背景颜色，如 #000000</td>
</tr>
<tr>
<td>navigationBarTextStyle</td>
<td>String</td>
<td>white</td>
<td>当前页面导航栏标题颜色，仅支持 black &#x2F; white</td>
</tr>
<tr>
<td>navigationBarTitleText</td>
<td>String</td>
<td></td>
<td>当前页面导航栏标题文字内容</td>
</tr>
<tr>
<td>backgroundColor</td>
<td>HexColor</td>
<td>#ffffff</td>
<td>当前下拉页面窗口的背景色</td>
</tr>
<tr>
<td>backgroundTextStyle</td>
<td>String</td>
<td>dark</td>
<td>当前页面下拉 loading 的样式，仅支持 dark &#x2F; light</td>
</tr>
<tr>
<td><code>enablePullDownRefresh</code></td>
<td>Boolean</td>
<td>false</td>
<td>是否为当前页面开启下拉刷新的效果</td>
</tr>
<tr>
<td>onReachBottomDistance</td>
<td>Number</td>
<td>50</td>
<td>页面上拉触底事件触发时距页面底部距离，单位为 px</td>
</tr>
</tbody></table>
</li>
</ul>
<h2 id="网络数据请求"><a href="#网络数据请求" class="headerlink" title="网络数据请求"></a>网络数据请求</h2><h3 id="请求限制"><a href="#请求限制" class="headerlink" title="请求限制"></a>请求限制</h3><ul>
<li>只能请求 HTTPS 类型的接口</li>
<li>必须将接口的域名添加到信任列表中</li>
</ul>
<h3 id="配置-request-合法域名"><a href="#配置-request-合法域名" class="headerlink" title="配置 request 合法域名"></a>配置 request 合法域名</h3><p>配置步骤：登录微信小程序管理后台 -&gt; 开发 -&gt; 开发设置 -&gt; 服务器域名 -&gt; 修改 request 合法域名</p>
<p>①<code>域名只支持 https 协议</code></p>
<p>② 域名不能使用 IP 地址或 localhost</p>
<p>③ 域名必须经过 ICP 备案</p>
<p>④ 服务器域名一个月内最多可申请 5 次修改</p>
<h3 id="GET-请求"><a href="#GET-请求" class="headerlink" title="GET 请求"></a>GET 请求</h3><p>调用微信小程序提供的 wx.request() 方法，可以发起 GET 数据请求，示例代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">wx.<span class="title function_">request</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;https://applet-base-api-t.itheima.net/api/get&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">  <span class="attr">success</span>: <span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="POST-请求"><a href="#POST-请求" class="headerlink" title="POST 请求"></a>POST 请求</h3><p>调用微信小程序提供的 wx.request() 方法，可以发起 POST 数据请求，示例代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">wx.<span class="title function_">request</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;https://applet-base-api-t.itheima.net/api/post&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;ls&#x27;</span>,</span><br><span class="line">    <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">  <span class="attr">success</span>: <span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="property">data</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>监听页面加载就触发 GET 和 POST 请求</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">onLoad</span>(<span class="params">options</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">getInfo</span>()</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">postInfo</span>()</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="跳过-request-合法域名校验"><a href="#跳过-request-合法域名校验" class="headerlink" title="跳过 request 合法域名校验"></a><strong>跳过</strong> <strong>request</strong> 合法域名校验</h3><ul>
<li><p>仅限在开发与调试阶段使用！</p>
</li>
<li><p>在微信开发者工具中，临时开启「开发环境不校验请求域名、TLS 版本及 HTTPS 证书」选项，跳过 request 合法域名的校验。</p>
<p><img src="https://cdn.jsdelivr.net/gh/koibaiyang/demo/img/image-20230723214815866.png" alt="image-20230723214815866"></p>
</li>
</ul>
<h2 id="页面导航"><a href="#页面导航" class="headerlink" title="页面导航"></a>页面导航</h2><p>页面导航指的是页面之间的<code>相互跳转</code></p>
<h3 id="声明式导航"><a href="#声明式导航" class="headerlink" title="声明式导航"></a><strong>声明式导航</strong></h3><ul>
<li><p>使用 <code>&lt;navigator&gt;</code>组件跳转到指定的页面</p>
<p>url 属性 表示要跳转的页面的地址，<code>必须以 / 开头</code></p>
<p>open-type 表示跳转的方式，默认值为 navigate，值可以为 switchTab（导航到 tabBar 页面）、navigate（导航到其他页面）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;navigator url=&quot;/pages/contact/contact&quot; open-type=&quot;switchTab&quot;&gt;</span><br><span class="line">    导航到关于页面</span><br><span class="line">&lt;/navigator&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>后退导航使用 <code>&lt;navigator&gt;</code> 需要指定 open-type 属性值必须是 navigateBack 和 delta 属性值是数字（表示后退的层级，默认值为 1）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;navigator url=&quot;/pages/share/share&quot;&gt;</span><br><span class="line">    导航到分享页面</span><br><span class="line">&lt;/navigator&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="编程式导航"><a href="#编程式导航" class="headerlink" title="编程式导航"></a><strong>编程式导航</strong></h3><ul>
<li><p><strong>导航到</strong> <strong>tabBar</strong> <strong>页面</strong></p>
<p><code>调用 wx.switchTab(Object object) </code>方法，可以跳转到 tabBar 页面。其中 Object 参数对象的属性列表如下：</p>
<table>
<thead>
<tr>
<th><strong>属性</strong></th>
<th><strong>类型</strong></th>
<th><strong>是否必选</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>url</td>
<td>string</td>
<td>是</td>
<td>需要跳转的 tabBar 页面的路径，路径后不能带参数</td>
</tr>
<tr>
<td>success</td>
<td>function</td>
<td>否</td>
<td>接口调用成功的回调函数</td>
</tr>
<tr>
<td>fail</td>
<td>function</td>
<td>否</td>
<td>接口调用失败的回调函数</td>
</tr>
<tr>
<td>complete</td>
<td>function</td>
<td>否</td>
<td>接口调用结束的回调函数（调用成功、失败都会执行）</td>
</tr>
</tbody></table>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button bindtap=&quot;gotoMessage&quot;&gt;导航到消息页&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">gotoMessage()&#123;</span><br><span class="line">    wx.switchTab(&#123;</span><br><span class="line">      url: &#x27;/pages/message/message&#x27;,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>导航到非</strong> <strong>tabBar</strong> <strong>页面</strong></p>
<p><code>调用 wx.navigateTo(Object object) 方法</code>，可以跳转到非 tabBar 的页面。其中 Object 参数对象的属性列表如下：</p>
<table>
<thead>
<tr>
<th><strong>属性</strong></th>
<th><strong>类型</strong></th>
<th><strong>是否必选</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>url</td>
<td>string</td>
<td>是</td>
<td>需要跳转到的非 tabBar 页面的路径，路径后可以带参数</td>
</tr>
<tr>
<td>success</td>
<td>function</td>
<td>否</td>
<td>接口调用成功的回调函数</td>
</tr>
<tr>
<td>fail</td>
<td>function</td>
<td>否</td>
<td>接口调用失败的回调函数</td>
</tr>
<tr>
<td>complete</td>
<td>function</td>
<td>否</td>
<td>接口调用结束的回调函数（调用成功、失败都会执行）</td>
</tr>
</tbody></table>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button bindtap=&quot;gotoShare&quot;&gt;导航到分享页&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"> gotoShare () &#123;</span><br><span class="line">    wx.navigateTo(&#123;</span><br><span class="line">      url: &#x27;/pages/share/share&#x27;,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>后退导航</strong></p>
<p><code>调用 wx.navigateBack(Object object) 方法</code>，可以返回上一页面或多级页面。其中 Object 参数对象可选的属性列表如下：</p>
<table>
<thead>
<tr>
<th><strong>属性</strong></th>
<th><strong>类型</strong></th>
<th><strong>默认值</strong></th>
<th><strong>是否必选</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>delta</td>
<td>number</td>
<td>1</td>
<td>否</td>
<td>返回的页面数，如果 delta 大于现有页面数，则返回到首页</td>
</tr>
<tr>
<td>success</td>
<td>function</td>
<td></td>
<td>否</td>
<td>接口调用成功的回调函数</td>
</tr>
<tr>
<td>fail</td>
<td>function</td>
<td></td>
<td>否</td>
<td>接口调用失败的回调函数</td>
</tr>
<tr>
<td>complete</td>
<td>function</td>
<td></td>
<td>否</td>
<td>接口调用结束的回调函数（调用成功、失败都会执行）</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="导航传参"><a href="#导航传参" class="headerlink" title="导航传参"></a>导航传参</h3><p>在声明式或编程式导航的 url 参数后拼接参数，然后在导航页的 onloading 事件中以 option 参数接受传递的参数</p>
<ul>
<li><p>参数与路径之间使用 ? 分隔</p>
</li>
<li><p>参数键与参数值用 &#x3D; 相连</p>
</li>
<li><p>不同参数用 &amp; 分隔</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//声明式导航</span><br><span class="line">&lt;navigator url=&quot;/pages/share/share?name=zs&amp;age=20&quot;&gt;</span><br><span class="line">    导航到分享页面</span><br><span class="line">&lt;/navigator&gt;</span><br><span class="line"></span><br><span class="line">//编程式导航</span><br><span class="line">&lt;button bindtap=&quot;gotoShare&quot;&gt;导航到分享页&lt;/button&gt;</span><br><span class="line"> gotoShare () &#123;</span><br><span class="line">    wx.navigateTo(&#123;</span><br><span class="line">      url: &#x27;/pages/share/share?name=ls&amp;gender=男&#x27;,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line"> //接受参数</span><br><span class="line">    onLoad(options) &#123;</span><br><span class="line">    this.setData(&#123;</span><br><span class="line">      query: options</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/koibaiyang/demo/img/image-20230728113145185.png" alt="image-20230728113145185"></p>
<h2 id="页面事件"><a href="#页面事件" class="headerlink" title="页面事件"></a>页面事件</h2><h3 id="下拉刷新"><a href="#下拉刷新" class="headerlink" title="下拉刷新"></a>下拉刷新</h3><p>下拉刷新是移动端的专有名词，指的是通过手指在屏幕上的下拉滑动操作，从而<strong>重新加载页面数据</strong>的行为。</p>
<ul>
<li>将 enablePullDownRefresh 设置为 true 启用下拉刷新</li>
<li>通过 onPullDownRefresh() 函数即可监听当前页面的下拉刷新事件</li>
<li>处理完成后，调用 wx.stopPullDownRefresh() 可以停止当前页面的下拉刷新。</li>
</ul>
<h3 id="上拉触底"><a href="#上拉触底" class="headerlink" title="上拉触底"></a>上拉触底</h3><p>上拉触底是移动端的专有名词，通过手指在屏幕上的上拉滑动操作，从而<strong>加载更多数据</strong>的行为。</p>
<ul>
<li>通过 onReachBottom() 函数即可监听当前页面的上拉触底事件</li>
<li>可以在全局或页面的 .json 配置文件中，通过 onReachBottomDistance 属性来配置上拉触底的距离(大小为像素，如 50)</li>
</ul>
<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>生命周期（Life Cycle）是指一个对象从创建 -&gt; 运行 -&gt; 销毁的整个阶段，强调的是一个时间段</p>
<h3 id="小程序中的生命周期"><a href="#小程序中的生命周期" class="headerlink" title="小程序中的生命周期"></a>小程序中的生命周期</h3><ul>
<li>应用生命周期：特指小程序从启动 -&gt; 运行 -&gt; 销毁的过程</li>
<li>页面生命周期：特指小程序中，每个页面的加载 -&gt; 渲染 -&gt; 销毁的过程</li>
</ul>
<h3 id="生命周期函数"><a href="#生命周期函数" class="headerlink" title="生命周期函数"></a>生命周期函数</h3><p>是由小程序框架提供的内置函数，会伴随着生命周期，<code>自动按次序执行</code></p>
<ul>
<li><p>应用生命周期函数: 在 app.js 中进行声明</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">App</span>(&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 当小程序初始化完成时，会触发 onLaunch（全局只触发一次）</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">onLaunch</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 当小程序启动，或从后台进入前台显示，会触发 onShow</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">onShow</span>: <span class="keyword">function</span> (<span class="params">options</span>) &#123;&#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 当小程序从前台进入后台，会触发 onHide</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">onHide</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>页面生命周期函数: 在页面的 .js 文件中进行声明</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面加载</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">onLoad</span>: <span class="keyword">function</span> (<span class="params">options</span>) &#123;&#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面初次渲染完成</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">onReady</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面显示</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">onShow</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面隐藏</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">onHide</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面卸载</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">onUnload</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="WXS"><a href="#WXS" class="headerlink" title="WXS"></a><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/wxs/">WXS</a></h2><p>WXS（WeiXin Script）是小程序独有的一套脚本语言，结合 WXML，可以构建出页面的结构,典型应用场景就是“过滤器”。</p>
<ul>
<li><p>①wxs 有自己的数据类型</p>
<p>number 数值类型、string 字符串类型、boolean 布尔类型、object 对象类型、</p>
<p>function 函数类型、array 数组类型、 date 日期类型、 regexp 正则</p>
<p>②wxs 不支持类似于 ES6 及以上的语法形式</p>
<p>不支持：let、const、解构赋值、展开运算符、箭头函数、对象属性简写、etc…</p>
<p><code>支持：var 定义变量、普通 function 函数等类似于 ES5 的语法</code></p>
<p>③wxs<code> 遵循 CommonJS 规范</code></p>
<p>module 对象</p>
<p>require() 函数</p>
<p>module.exports 对象</p>
</li>
</ul>
<h3 id="内嵌-wxs-脚本"><a href="#内嵌-wxs-脚本" class="headerlink" title="内嵌 wxs 脚本"></a><strong>内嵌</strong> <strong>wxs</strong> <strong>脚本</strong></h3><p>wxs 代码可以编写在 wxml 文件中的 <wxs> 标签内，须提供 module 属性，用来指定当前 wxs 的模块名称</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;view&gt;</span><br><span class="line">  &#123;&#123;m1.toUpper(name)&#125;&#125;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line"></span><br><span class="line">&lt;wxs module=&quot;m1&quot;&gt;</span><br><span class="line">  module.exports.toUpper = function(str) &#123;</span><br><span class="line">    return str.toUpperCase()</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/wxs&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="外联的-wxs-脚本"><a href="#外联的-wxs-脚本" class="headerlink" title="外联的 wxs 脚本"></a><strong>外联的</strong> <strong>wxs</strong> <strong>脚本</strong></h3><img src="C:\Users\MyJc9\AppData\Roaming\Typora\typora-user-images\image-20230731215832612.png" alt="image-20230731215832612" style="zoom:80%;" />

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;view&gt;</span><br><span class="line">  &#123;&#123;m2.toLower(country)&#125;&#125;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line"></span><br><span class="line">&lt;wxs src=&quot;../../utils/tools.wxs&quot; module=&quot;m2&quot;/&gt;</span><br></pre></td></tr></table></figure>

<h3 id="⭐"><a href="#⭐" class="headerlink" title="⭐"></a>⭐</h3><p>wxs 典型的应用场景就是“过滤器”，经常配合 Mustache 语法进行使用</p>
<p>但是，在 wxs 中定义的函数<code>不能作为组件的事件回调函数</code>，如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button bindtap=&quot;m2.toLower&quot; &gt;按钮&lt;/button&gt;</span><br></pre></td></tr></table></figure>

<h1 id="小程序进阶"><a href="#小程序进阶" class="headerlink" title="小程序进阶"></a>小程序进阶</h1><hr>
<h2 id="自定义组件"><a href="#自定义组件" class="headerlink" title="自定义组件"></a><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/">自定义组件</a></h2><h3 id="组件的创建与引用"><a href="#组件的创建与引用" class="headerlink" title="组件的创建与引用"></a><strong>组件的创建与引用</strong></h3><ul>
<li><p><strong>创建组件</strong></p>
<p>① 在项目的根目录中，鼠标右键，创建 components -&gt; test 文件夹</p>
<p>② 在新建的 components -&gt; test 文件夹上，鼠标右键，点击“新建 Component”</p>
<p>③ 键入组件的名称之后回车，会自动生成组件对应的 4 个文件，后缀名分别为 .js，.json， .wxml 和 .wxss</p>
</li>
<li><p><strong>引用组件</strong></p>
<p>① 局部引用</p>
<p><img src="https://cdn.jsdelivr.net/gh/koibaiyang/demo/img/image-20230801192952353.png" alt="image-20230801192952353"></p>
<p>② 全局引用</p>
<p><img src="https://cdn.jsdelivr.net/gh/koibaiyang/demo/img/image-20230801193012423.png" alt="image-20230801193012423"></p>
</li>
<li><p><strong><code>组件的事件处理函数需要定义到 methods 节点中</code></strong></p>
</li>
</ul>
<h3 id="组件的样式隔离"><a href="#组件的样式隔离" class="headerlink" title="组件的样式隔离"></a>组件的样式隔离</h3><p>默认情况下，自定义组件的样式只对当前组件生效，不会影响到组件之外的 UI 结构。但是<code>只有 class 选择器会有样式隔离效果</code>，id 选择器、属性选择器、标签选择器不受样式隔离的影响</p>
<ul>
<li><p>可以在组件的 .js 文件中通过 options 配置项修改 styleIsolation 隔离效果</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// components/test/test.js</span></span><br><span class="line"><span class="title class_">Component</span>(&#123;</span><br><span class="line">  <span class="attr">options</span>: &#123;</span><br><span class="line">    <span class="attr">styleIsolation</span>: <span class="string">&#x27;shared&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>styleIsolation</strong> <strong>的可选值</strong></p>
<table>
<thead>
<tr>
<th><strong>可选值</strong></th>
<th><strong>默认值</strong></th>
<th align="left"><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>isolated</td>
<td>是</td>
<td align="left">表示启用样式隔离，在自定义组件内外，使用 class 指定的样式将不会相互影响</td>
</tr>
<tr>
<td>apply-shared</td>
<td>否</td>
<td align="left">表示页面 wxss 样式将影响到自定义组件，但自定义组件 wxss 中指定的样式不会影响页面</td>
</tr>
<tr>
<td>shared</td>
<td>否</td>
<td align="left">表示页面 wxss 样式将影响到自定义组件，自定义组件 wxss 中指定的样式也会影响页面和其他设置了 apply-shared 或 shared 的自定义组件</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="methods"><a href="#methods" class="headerlink" title="methods"></a>methods</h3><p>事件处理函数和自定义方法需要定义到 methods 节点中</p>
<ul>
<li><p>自定义方法名称建议以_开头</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    addCount () &#123; <span class="comment">// 事件处理函数</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">        <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">count</span> + <span class="number">1</span></span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">_showToast</span>()</span><br><span class="line">    &#125;,</span><br><span class="line">    _showToast () &#123; <span class="comment">// 自定义方法</span></span><br><span class="line">      wx.<span class="title function_">showToast</span>(&#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;count值是&#x27;</span> + <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">count</span>,</span><br><span class="line">        <span class="attr">icon</span>: <span class="string">&quot;none&quot;</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="properties-属性"><a href="#properties-属性" class="headerlink" title="properties 属性"></a><strong>properties</strong> <strong>属性</strong></h3><p>properties 是组件的对外属性，用来接收外界传递到组件中的数据</p>
<p><img src="https://cdn.jsdelivr.net/gh/koibaiyang/demo/img/image-20230802205612432.png" alt="image-20230802205612432"></p>
<ul>
<li><p>properties 中的值全等于（&#x3D;&#x3D;&#x3D;）data 中的值，并且也是可读写的，修改方式与修改 data 中的值一样</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">  <span class="attr">max</span>: <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">max</span> + <span class="number">1</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="数据监听器"><a href="#数据监听器" class="headerlink" title="数据监听器"></a><strong>数据监听器</strong></h3><p>数据监听器用于监听和响应任何属性和数据字段的变化，从而执行特定的操作。它的作用类似于 vue 中的 watch 侦听器，在 observers 节点下声明监听器</p>
<ul>
<li>字段监听</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/koibaiyang/demo/img/image-20230802211408132.png" alt="image-20230802211408132"></p>
<ul>
<li><strong>监听对象属性的变化</strong></li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/koibaiyang/demo/img/image-20230802211551556.png" alt="image-20230802211551556"></p>
<h3 id="纯数据字段"><a href="#纯数据字段" class="headerlink" title="纯数据字段"></a>纯数据字段</h3><p>纯数据字段指的是那些不用于界面渲染的 data 字段，纯数据字段有助于提升页面更新的性能</p>
<ul>
<li><p>使用</p>
<p>在 Component 构造器的 options 节点中，指定 pureDataPattern 为一个正则表达式，字段名符合这个正则表达式的字段将成为纯数据字段</p>
<p><img src="https://cdn.jsdelivr.net/gh/koibaiyang/demo/img/image-20230802223101746.png" alt="image-20230802223101746"></p>
</li>
</ul>
<h3 id="组件生命周期函数"><a href="#组件生命周期函数" class="headerlink" title="组件生命周期函数"></a>组件生命周期函数</h3><p>声明在 Component 构造器的第一级参数中 lifetimes 字段内</p>
<p><img src="https://cdn.jsdelivr.net/gh/koibaiyang/demo/img/image-20230802224238364.png" alt="image-20230802224238364"></p>
<table>
<thead>
<tr>
<th><strong>生命周期函数</strong></th>
<th><strong>参数</strong></th>
<th><strong>描述说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td><code>created </code></td>
<td>无</td>
<td>在组件实例刚刚被创建时执行</td>
</tr>
<tr>
<td><code>attached </code></td>
<td>无</td>
<td>在组件实例进入页面节点树时执行</td>
</tr>
<tr>
<td>ready</td>
<td>无</td>
<td>在组件在视图层布局完成后执行</td>
</tr>
<tr>
<td>moved</td>
<td>无</td>
<td>在组件实例被移动到节点树另一个位置时执行</td>
</tr>
<tr>
<td><code>detached  </code></td>
<td>无</td>
<td>在组件实例被从页面节点树移除时执行</td>
</tr>
<tr>
<td>error</td>
<td>Object Error</td>
<td>每当组件方法抛出错误时执行</td>
</tr>
</tbody></table>
<p>① 组件实例刚被创建好的时候，created 生命周期函数会被触发</p>
<ul>
<li><p>不能调用 setData</p>
</li>
<li><p>通常在这个生命周期函数中，只应该用于给组件的 this 添加一些自定义的属性字段</p>
</li>
</ul>
<p>② 在组件完全初始化完毕、进入页面节点树后， attached 生命周期函数会被触发</p>
<ul>
<li><p>此时， this.data 已被初始化完毕</p>
</li>
<li><p>这个生命周期很有用，绝大多数初始化的工作可以在这个时机进行（例如发请求获取初始数据）</p>
</li>
</ul>
<p>③ 在组件离开页面节点树后， detached 生命周期函数会被触发</p>
<ul>
<li><p>退出一个页面时，会触发页面内每个自定义组件的 detached 生命周期函数</p>
</li>
<li><p>此时适合做一些清理性质的工作</p>
</li>
</ul>
<h3 id="组件所在页面的生命周期"><a href="#组件所在页面的生命周期" class="headerlink" title="组件所在页面的生命周期"></a><strong>组件所在页面的生命周期</strong></h3><p>自定义组件的行为依赖于页面状态的变化，此时就需要用到组件所在页面的生命周期，定义在 pageLifetimes 节点中</p>
<p><img src="https://cdn.jsdelivr.net/gh/koibaiyang/demo/img/image-20230802225326866.png" alt="image-20230802225326866"></p>
<table>
<thead>
<tr>
<th><strong>生命周期函数</strong></th>
<th><strong>参数</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>show</td>
<td>无</td>
<td>组件所在的页面被展示时执行</td>
</tr>
<tr>
<td>hide</td>
<td>无</td>
<td>组件所在的页面被隐藏时执行</td>
</tr>
<tr>
<td>resize</td>
<td>Object Size</td>
<td>组件所在的页面尺寸变化时执行</td>
</tr>
</tbody></table>
<h3 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a><strong>插槽</strong></h3><p>在自定义组件的 wxml 结构中，可以提供一个 <slot> 节点（插槽），用于承载组件使用者提供的 wxml 结构</p>
<ul>
<li><p>单个插槽</p>
<p><img src="https://cdn.jsdelivr.net/gh/koibaiyang/demo/img/image-20230803093305463.png" alt="image-20230803093305463"></p>
</li>
<li><p>多个插槽</p>
<p>需要使用多 <slot> 插槽时，可以在组件的 .js 文件中 options 节点下将 multipleSlots 设置为 true</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Component</span>(&#123;</span><br><span class="line">  <span class="attr">options</span>: &#123;</span><br><span class="line">    <span class="attr">multipleSlots</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>需要指定 slot 的 name 属性，在使用时通过 slot 属性指定插槽的位置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 指定组件的插槽名称</span><br><span class="line">&lt;slot name=&quot;before&quot;&gt;&lt;/slot&gt;</span><br><span class="line">  &lt;view&gt;</span><br><span class="line">    test3 - 插槽</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">&lt;slot name=&quot;after&quot;&gt;&lt;/slot&gt;</span><br><span class="line"></span><br><span class="line">// 通过slot属性使用插槽</span><br><span class="line">&lt;test3&gt;</span><br><span class="line">  &lt;view slot=&quot;before&quot;&gt;</span><br><span class="line">    插槽的内容 - 前</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">  &lt;text slot=&quot;after&quot;&gt; 后 &lt;/text&gt;</span><br><span class="line">&lt;/test3&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h3><h4 id="父传子"><a href="#父传子" class="headerlink" title="父传子"></a>父传子</h4><ul>
<li><p>属性绑定：用于父组件向子组件的指定属性设置数据，仅能设置 JSON 兼容的数据（不能传递方法）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 父组件中</span><br><span class="line">&lt;test4 count=&quot;&#123;&#123;count&#125;&#125;&quot;&gt;&lt;/test4&gt;</span><br><span class="line"></span><br><span class="line">// 子组件的.js文件中</span><br><span class="line">Component(&#123;</span><br><span class="line">    properties: &#123;</span><br><span class="line">      count: Number</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;）</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="子传父"><a href="#子传父" class="headerlink" title="子传父"></a>子传父</h4><ul>
<li><p>事件绑定：事件绑定用于实现子向父传值，可以传递任何类型的数据</p>
<p>① 在父组件的 js 中，定义一个函数，这个函数即将通过自定义事件的形式，传递给子组件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// e.detail.value 可以获得子组件传递的数据</span></span><br><span class="line">syncCount (e) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">      <span class="attr">count</span>: e.<span class="property">detail</span>.<span class="property">value</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<p>② 在父组件的 wxml 中，通过自定义事件的形式，将步骤 1 中定义的函数引用，传递给子组件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;test4 count=&quot;&#123;&#123;count&#125;&#125;&quot; bind:syncCount=&quot;syncCount&quot;&gt;&lt;/test4&gt;</span><br></pre></td></tr></table></figure>

<p>③ 在子组件的 js 中，通过调用 this.triggerEvent(‘自定义事件名称’, { &#x2F;_ 参数对象 _&#x2F; }) ，将数据发送到父组件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">addCount () &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">properties</span>.<span class="property">count</span> + <span class="number">1</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">triggerEvent</span>(<span class="string">&#x27;syncCount&#x27;</span>, &#123;<span class="attr">value</span>: 			<span class="variable language_">this</span>.<span class="property">properties</span>.<span class="property">count</span>&#125;) <span class="comment">// 传递的value也可以以是方法</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>④ 在父组件的 js 中，通过 e.detail 获取到子组件传递过来的数据</p>
</li>
<li><p>父组件还可以通过 this.selectComponent(“id 或 class 选择器”) 获取子组件实例对象，这样就可以直接访问子组件的任意数据和方法</p>
</li>
</ul>
<h3 id="behaviors"><a href="#behaviors" class="headerlink" title="behaviors"></a><strong>behaviors</strong></h3><p>behaviors 是小程序中，用于实现组件间代码共享的特性，类似于 Vue.js 中的 “mixins”</p>
<ul>
<li><p>创建 behavior</p>
<p><img src="https://cdn.jsdelivr.net/gh/koibaiyang/demo/img/image-20230803144218063.png" alt="image-20230803144218063"></p>
</li>
<li><p>导入 behavior</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// components/test4/test4.js</span></span><br><span class="line"><span class="keyword">const</span> behavior = <span class="built_in">require</span>(<span class="string">&#x27;../../behaviors/behavior&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Component</span>(&#123;</span><br><span class="line">  <span class="attr">behaviors</span>: [behavior],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>共享的数据和方法会挂载到原型上，可以直接使用</p>
<p><img src="https://cdn.jsdelivr.net/gh/koibaiyang/demo/img/image-20230803144543468.png" alt="image-20230803144543468"></p>
</li>
<li><p>behavior 可用的节点</p>
<table>
<thead>
<tr>
<th><strong>可用的节点</strong></th>
<th><strong>类型</strong></th>
<th><strong>是否必填</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td><code>properties  </code></td>
<td>Object Map</td>
<td>否</td>
<td>同组件的属性</td>
</tr>
<tr>
<td><code>data  </code></td>
<td>Object</td>
<td>否</td>
<td>同组件的数据</td>
</tr>
<tr>
<td><code>methods </code></td>
<td>Object</td>
<td>否</td>
<td>同自定义组件的方法</td>
</tr>
<tr>
<td><code>behaviors  </code></td>
<td>String Array</td>
<td>否</td>
<td>引入其它的 behavior</td>
</tr>
<tr>
<td>created</td>
<td>Function</td>
<td>否</td>
<td>生命周期函数</td>
</tr>
<tr>
<td>attached</td>
<td>Function</td>
<td>否</td>
<td>生命周期函数</td>
</tr>
<tr>
<td>ready</td>
<td>Function</td>
<td>否</td>
<td>生命周期函数</td>
</tr>
<tr>
<td>moved</td>
<td>Function</td>
<td>否</td>
<td>生命周期函数</td>
</tr>
<tr>
<td>detached</td>
<td>Function</td>
<td>否</td>
<td>生命周期函数</td>
</tr>
</tbody></table>
</li>
<li><p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/behaviors.html">同名字段的覆盖和组合规则</a></p>
</li>
</ul>
<h2 id="使用-npm-包"><a href="#使用-npm-包" class="headerlink" title="使用 npm 包"></a>使用 npm 包</h2><h3 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h3><p>① 不支持依赖于 Node.js 内置库的包</p>
<p>② 不支持依赖于浏览器内置对象的包</p>
<p>③ 不支持依赖于 C++ 插件的包</p>
<h3 id="vant-weapp"><a href="#vant-weapp" class="headerlink" title="vant weapp"></a>vant weapp</h3><ul>
<li><p>在小程序项目中，安装<a href="https://vant-contrib.gitee.io/vant-weapp/#/quickstart"> Vant 组件库</a>主要分为如下 3 步：</p>
<p>① 通过 npm 安装</p>
<p>② 构建 npm 包</p>
<p>③ 修改 app.json</p>
</li>
<li><p>定制 vant weapp 全局主题样式，在 app.wxss 中，写入 CSS 变量，<a href="https://github.com/youzan/vant-weapp/blob/dev/packages/common/style/var.less">配置文件</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">page &#123;</span><br><span class="line">  --button-primary-background-color: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/koibaiyang/demo/img/image-20230803161437494.png" alt="image-20230803161437494"></p>
</li>
</ul>
<h3 id="API-Promise化"><a href="#API-Promise化" class="headerlink" title="API Promise化"></a><strong>API Promise</strong>化</h3><p>默认情况下，小程序官方提供的异步 API 都是基于回调函数实现的，容易造成回调地狱的问题，代码的可读性、维护性差。通过额外的配置，将官方提供的、基于回调函数的异步 API，升级改造为基于 Promise 的异步 API</p>
<ul>
<li><p><strong>实现</strong> <strong>API Promise</strong> <strong>化</strong>：依赖于 miniprogram-api-promise 这个第三方的 npm 包</p>
<p>1、安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save miniprogram-api-promise</span><br></pre></td></tr></table></figure>

<p>2、重构 npm</p>
<p><img src="https://cdn.jsdelivr.net/gh/koibaiyang/demo/img/image-20230803165253431.png" alt="image-20230803165253431"></p>
<p>3、 在 app.js 中，调用 promisifyAll()</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//app.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; promisifyAll &#125; <span class="keyword">from</span> <span class="string">&#x27;miniprogram-api-promise&#x27;</span></span><br><span class="line"><span class="keyword">const</span> wxp = (wx.<span class="property">p</span> = &#123;&#125;)</span><br><span class="line"><span class="title function_">promisifyAll</span>(wx, wxp)</span><br></pre></td></tr></table></figure>

<p>4、使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="title function_">getInfo</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;<span class="attr">data</span>: res&#125; = <span class="keyword">await</span> wx.<span class="property">p</span>.<span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;https://applet-base-api-t.itheima.net/api/get&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="全局数据共享"><a href="#全局数据共享" class="headerlink" title="全局数据共享"></a>全局数据共享</h2><p>在小程序中，可使用 mobx-miniprogram 配合 mobx-miniprogram-bindings 实现全局数据共享。其中：</p>
<ul>
<li><p>lmobx-miniprogram 用来创建 Store 实例对象</p>
</li>
<li><p>mobx-miniprogram-bindings 用来把 Store 中的共享数据或方法，绑定到组件或页面中使用</p>
</li>
</ul>
<h3 id="安装包"><a href="#安装包" class="headerlink" title="安装包"></a><a href="https://www.npmjs.com/package/mobx-miniprogram-bindings">安装包</a></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save mobx-miniprogram mobx-miniprogram-bindings</span><br></pre></td></tr></table></figure>

<h3 id="定义-store"><a href="#定义-store" class="headerlink" title="定义 store"></a>定义 store</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// store.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; observable, action &#125; <span class="keyword">from</span> <span class="string">&#x27;mobx-miniprogram&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> store = <span class="title function_">observable</span>(&#123;</span><br><span class="line">  <span class="comment">// 数据字段</span></span><br><span class="line">  <span class="attr">numA</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">numB</span>: <span class="number">2</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 计算属性</span></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">sum</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">numA</span> + <span class="variable language_">this</span>.<span class="property">numB</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// actions</span></span><br><span class="line">  <span class="attr">updateNumA</span>: <span class="title function_">action</span>(<span class="keyword">function</span> (<span class="params">step</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">numA</span> += step</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">updateNumB</span>: <span class="title function_">action</span>(<span class="keyword">function</span> (<span class="params">step</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">numB</span> += step</span><br><span class="line">  &#125;),</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="使用-store"><a href="#使用-store" class="headerlink" title="使用 store"></a>使用 store</h3><ul>
<li><p>在 page 页面使用 store，在.js 文件中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入需要的包和store</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStoreBindings &#125; <span class="keyword">from</span> <span class="string">&quot;mobx-miniprogram-bindings&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; store &#125; <span class="keyword">from</span> <span class="string">&quot;../../store/store&quot;</span>;</span><br><span class="line"><span class="comment">// 在 onload 生命周期给page页面实例挂载storeBindings</span></span><br><span class="line"><span class="attr">onLoad</span>: <span class="keyword">function</span> (<span class="params">options</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">storeBindings</span> = <span class="title function_">createStoreBindings</span>(<span class="variable language_">this</span>, &#123;</span><br><span class="line">      store,</span><br><span class="line">      <span class="attr">fields</span>: [<span class="string">&quot;numA&quot;</span>, <span class="string">&quot;numB&quot;</span>, <span class="string">&quot;sum&quot;</span>], <span class="comment">// 挂载数据</span></span><br><span class="line">      <span class="attr">actions</span>: [<span class="string">&quot;updateNumA&quot;</span>, <span class="string">&quot;updateNumB&quot;</span>], <span class="comment">// 方法</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="comment">// 清除挂载的方法</span></span><br><span class="line"> <span class="attr">onUnload</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">storeBindings</span>.<span class="title function_">destroyStoreBindings</span>();</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 可以直接使用store挂载的数据和方法 --&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">  &#123;&#123;numA&#125;&#125; + &#123;&#123;numB&#125;&#125; = &#123;&#123;sum&#125;&#125;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;van-button type=&quot;primary&quot; data-step=&quot;&#123;&#123;-1&#125;&#125;&quot; bindtap=&quot;changeNumA&quot;&gt; numA - 1&lt;/van-button&gt;</span><br><span class="line">&lt;van-button type=&quot;primary&quot; data-step=&quot;&#123;&#123;1&#125;&#125;&quot; bindtap=&quot;changeNumB&quot;&gt; numB + 1&lt;/van-button&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在组件中使用 store，在.js 文件中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; storeBindingsBehavior &#125; <span class="keyword">from</span> <span class="string">&#x27;mobx-miniprogram-bindings&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; store &#125; <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Component</span>(&#123;</span><br><span class="line">  <span class="attr">behaviors</span>: [storeBindingsBehavior],</span><br><span class="line"></span><br><span class="line">  <span class="attr">storeBindings</span>: &#123;</span><br><span class="line">    store,</span><br><span class="line">    <span class="attr">fields</span>: &#123;</span><br><span class="line">      <span class="attr">numA</span>: <span class="function">() =&gt;</span> store.<span class="property">numA</span>, <span class="comment">// 映射numA，也可以写成&quot;numA&quot;</span></span><br><span class="line">      <span class="attr">numB</span>: <span class="function">(<span class="params">store</span>) =&gt;</span> store.<span class="property">numB</span>, <span class="comment">// 或者&quot;numB&quot;</span></span><br><span class="line">      <span class="attr">sum</span>: <span class="string">&#x27;sum&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">actions</span>: &#123;</span><br><span class="line">      <span class="attr">updateNumA</span>: <span class="string">&#x27;updateNumA&#x27;</span>,</span><br><span class="line">      <span class="attr">updateNumB</span>: <span class="string">&#x27;updateNumB&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">myMethod</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">sum</span> <span class="comment">// 来自于 MobX store 的字段</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="分包"><a href="#分包" class="headerlink" title="分包"></a><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/subpackages.html">分包</a></h2><p>分包指的是把一个完整的小程序项目，按照需求划分为不同的子包，在构建时打包成不同的分包，用户在使用时按需进行加载</p>
<ul>
<li><p><strong>分包后</strong> <strong>项目的构成</strong></p>
<p>主包：一般只包含项目的启动页面或 TabBar 页面、以及所有分包都需要用到的一些公共资源</p>
<p>分包：只包含和当前分包有关的页面和私有资源</p>
</li>
<li><p>整个小程序所有分包大小不超过 16M（主包 + 所有分包）,单个分包&#x2F;主包大小不能超过 2M</p>
</li>
</ul>
<h3 id="使用分包"><a href="#使用分包" class="headerlink" title="使用分包"></a>使用分包</h3><ul>
<li><p>在 app.json 中的 subPackages 节点下配置分包</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;pages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;pages/home/home&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;pages/message/message&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;pages/contact/contact&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;subPackages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;root&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pagesA&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pa&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;pages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;pages/cat/cat&quot;</span><span class="punctuation">,</span> <span class="string">&quot;pages/dog/dog&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;root&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pagesB&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pb&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;pages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;pages/apple/apple&quot;</span><span class="punctuation">,</span> <span class="string">&quot;pages/orange/orange&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="独立分包"><a href="#独立分包" class="headerlink" title="独立分包"></a>独立分包</h3><p>本质上也是分包，只不过它比较特殊，可以独立于主包和其他分包而单独运行</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;root&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;pagesA&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;pages/cat/cat&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;pages/dog/dog&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;independent&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span> <span class="comment">// 设置为独立分包</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>独立分包和普通分包以及主包之间，是相互隔绝的，不能相互引用彼此的资源！例如：</p>
<p>① 主包无法引用独立分包内的私有资源</p>
<p>② 独立分包之间，不能相互引用私有资源</p>
<p>③ 独立分包和普通分包之间，不能相互引用私有资源</p>
<p>④**特别注意：<code>**独立分包中不能引用主包内的公共资源</code></p>
</li>
</ul>
<h3 id="分包预下载"><a href="#分包预下载" class="headerlink" title="分包预下载"></a>分包预下载</h3><p>在进入小程序的某个页面时，由框架自动预下载可能需要的分包，从而提升进入后续分包页面时的启动速度，但是同一个分包中的页面享有共同的预下载大小限额 2M</p>
<ul>
<li>在 app.json 中的 preloadRule 节点下可以配置分包预下载</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;preloadRule&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;pages/contact/contact&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;network&quot;</span><span class="punctuation">:</span> <span class="string">&quot;all&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;packages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;pagesA&quot;</span><span class="punctuation">]</span></span><br><span class="line"></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>

<h2 id="自定义-tabBar"><a href="#自定义-tabBar" class="headerlink" title="自定义 tabBar"></a><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/ability/custom-tabbar.html">自定义 tabBar</a></h2><ul>
<li>Vant 组件库 + 自定义组件 + 全局数据共享</li>
</ul>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>Weapp</tag>
      </tags>
  </entry>
</search>
